00001  0000             ; 10 SYS (2080)
00002  0001             
00003  0001             *=$0801
00004  0801             
00005  0801  0E 08 0A              BYTE $0E, $08, $0A, $00, $9E, $20, $28
00006  0808  32 30 38              BYTE $32, $30, $38, $30, $29, $00, $00, $00
00007  0810             
00008  0810             ; SPRITE DATA
00009  0810             *=$2A80
00010  2A80             ; LOAD SPRITES 1-> 5 PADDED TO 64 BYTES
00011  2A80             @          
00012  2A80  10 00 12              BYTE $10,$00,$12,$08,$7E,$1C,$05,$FF
00013  2A88  CC 06 10              BYTE $CC,$06,$10,$36,$0F,$9F,$F0,$08
00014  2A90  92 10 08              BYTE $92,$10,$08,$F3,$F0,$08,$F2,$10
00015  2A98  08 F4 08              BYTE $08,$F4,$08,$1F,$FE,$18,$20,$01
00016  2AA0  F4 20 00              BYTE $F4,$20,$00,$A4,$27,$80,$BC,$27
00017  2AA8  C0 A4 1F              BYTE $C0,$A4,$1F,$FF,$FC,$0D,$3C,$B0
00018  2AB0  19 C3 98              BYTE $19,$C3,$98,$31,$00,$8C,$30,$00
00019  2AB8  0C 78 00              BYTE $0C,$78,$00,$1E,$CC,$00,$33,$00
00020  2AC0  FF FF FF              BYTE $FF,$FF,$FF,$80,$00,$01,$BF,$00
00021  2AC8  01 B0 00              BYTE $01,$B0,$00,$01,$A8,$00,$01,$A4
00022  2AD0  00 01 A2              BYTE $00,$01,$A2,$00,$01,$A1,$00,$01
00023  2AD8  80 80 01              BYTE $80,$80,$01,$80,$40,$01,$80,$20
00024  2AE0  01 80 00              BYTE $01,$80,$00,$01,$80,$00,$01,$80
00025  2AE8  00 01 80              BYTE $00,$01,$80,$00,$01,$80,$00,$01
00026  2AF0  80 00 01              BYTE $80,$00,$01,$80,$00,$01,$80,$00
00027  2AF8  01 80 00              BYTE $01,$80,$00,$01,$FF,$FF,$FF,$00
00028  2B00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00029  2B08  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00030  2B10  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00031  2B18  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00032  2B20  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00033  2B28  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00034  2B30  00 3C 00              BYTE $00,$3C,$00,$00,$E7,$00,$00,$E7
00035  2B38  00 00 7E              BYTE $00,$00,$7E,$00,$00,$3C,$00,$00
00036  2B40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00037  2B48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00038  2B50  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$0E
00039  2B58  00 00 03              BYTE $00,$00,$03,$00,$00,$06,$00,$00
00040  2B60  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00041  2B68  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00042  2B70  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00043  2B78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00044  2B80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00045  2B88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00046  2B90  00 00 00              BYTE $00,$00,$00,$00,$00,$70,$00,$00
00047  2B98  D0 00 00              BYTE $D0,$00,$00,$60,$00,$00,$00,$00
00048  2BA0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00049  2BA8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00050  2BB0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00051  2BB8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00052  2BC0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00053  2BC8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00054  2BD0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00055  2BD8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00056  2BE0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00057  2BE8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00058  2BF0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00059  2BF8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00060  2C00             
00061  2C00             @          
00062  2C00             INCBIN     "NEPTUNELANDER.SPT", 1, 6 ,TRUE
00063  2C00             @          
00064  2C00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00065  2C08  00 00 02              BYTE $00,$00,$02,$80,$01,$02,$00,$01
00066  2C10  02 00 02              BYTE $02,$00,$02,$6A,$40,$00,$6A,$40
00067  2C18  00 A9 40              BYTE $00,$A9,$40,$00,$2A,$40,$00,$2A
00068  2C20  80 00 AA              BYTE $80,$00,$AA,$80,$00,$AA,$80,$02
00069  2C28  9A A0 02              BYTE $9A,$A0,$02,$6A,$50,$02,$80,$A0
00070  2C30  02 00 A0              BYTE $02,$00,$A0,$00,$00,$00,$00,$00
00071  2C38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00072  2C40  00 00 00              BYTE $00,$00,$00,$08,$00,$A0,$08,$00
00073  2C48  40 0A 20              BYTE $40,$0A,$20,$40,$01,$A5,$40,$01
00074  2C50  AA 80 02              BYTE $AA,$80,$02,$AA,$80,$2A,$AA,$80
00075  2C58  09 AA 40              BYTE $09,$AA,$40,$01,$A9,$40,$01,$69
00076  2C60  40 01 6A              BYTE $40,$01,$6A,$60,$01,$6A,$60,$01
00077  2C68  6A A0 02              BYTE $6A,$A0,$02,$AA,$80,$02,$AA,$60
00078  2C70  0A 55 60              BYTE $0A,$55,$60,$08,$99,$60,$28,$00
00079  2C78  08 20 00              BYTE $08,$20,$00,$00,$00,$00,$00,$00
00080  2C80  20 02 80              BYTE $20,$02,$80,$28,$0A,$80,$08,$9A
00081  2C88  0A 09 95              BYTE $0A,$09,$95,$68,$01,$A9,$50,$09
00082  2C90  AA 90 A9              BYTE $AA,$90,$A9,$AA,$90,$A6,$AA,$A0
00083  2C98  05 6A A0              BYTE $05,$6A,$A0,$29,$6A,$A0,$09,$AA
00084  2CA0  A0 29 AA              BYTE $A0,$29,$AA,$90,$29,$AA,$90,$06
00085  2CA8  AA 98 06              BYTE $AA,$98,$06,$AA,$98,$06,$96,$90
00086  2CB0  06 65 50              BYTE $06,$65,$50,$04,$25,$60,$28,$25
00087  2CB8  28 A0 28              BYTE $28,$A0,$28,$08,$80,$20,$0A,$00
00088  2CC0  28 02 80              BYTE $28,$02,$80,$2A,$9A,$80,$09,$5A
00089  2CC8  80 0A A5              BYTE $80,$0A,$A5,$60,$26,$AA,$50,$26
00090  2CD0  AA 90 AA              BYTE $AA,$90,$AA,$AA,$A0,$5A,$AA,$A0
00091  2CD8  5A 6A A8              BYTE $5A,$6A,$A8,$96,$6A,$9A,$26,$5A
00092  2CE0  96 06 AA              BYTE $96,$06,$AA,$A6,$06,$AA,$A8,$06
00093  2CE8  AA A8 05              BYTE $AA,$A8,$05,$AA,$58,$05,$6A,$50
00094  2CF0  05 5A 50              BYTE $05,$5A,$50,$2A,$9A,$A8,$18,$18
00095  2CF8  28 A0 18              BYTE $28,$A0,$18,$28,$80,$20,$0A,$00
00096  2D00  80 08 02              BYTE $80,$08,$02,$A2,$28,$02,$29,$6A
00097  2D08  8A 09 96              BYTE $8A,$09,$96,$AA,$0A,$A6,$AA,$AA
00098  2D10  A5 A6 56              BYTE $A5,$A6,$56,$A9,$A4,$56,$69,$A4
00099  2D18  69 65 56              BYTE $69,$65,$56,$A9,$6A,$A6,$29,$6A
00100  2D20  A6 09 9A              BYTE $A6,$09,$9A,$A6,$0A,$96,$A8,$0A
00101  2D28  96 A8 0A              BYTE $96,$A8,$0A,$AA,$A0,$29,$56,$50
00102  2D30  25 66 50              BYTE $25,$66,$50,$29,$A5,$68,$A0,$2A
00103  2D38  0A A0 2A              BYTE $0A,$A0,$2A,$02,$80,$28,$02,$00
00104  2D40  02 A8 02              BYTE $02,$A8,$02,$06,$96,$0A,$05,$6D
00105  2D48  B8 07 EE              BYTE $B8,$07,$EE,$78,$0B,$EB,$A0,$AA
00106  2D50  6B A0 96              BYTE $6B,$A0,$96,$A7,$E0,$A6,$95,$F8
00107  2D58  25 A6 B8              BYTE $25,$A6,$B8,$09,$E6,$96,$09,$F5
00108  2D60  AA 09 B9              BYTE $AA,$09,$B9,$9A,$09,$BE,$9A,$0A
00109  2D68  AA 98 09              BYTE $AA,$98,$09,$DA,$78,$09,$F6,$F8
00110  2D70  2A 9A B8              BYTE $2A,$9A,$B8,$28,$14,$94,$28,$28
00111  2D78  A4 00 20              BYTE $A4,$00,$20,$2A,$00,$20,$2A,$00
00112  2D80  00 00 00              BYTE $00,$00,$00,$03,$68,$00,$02,$58
00113  2D88  94 00 A6              BYTE $94,$00,$A6,$58,$0A,$F6,$60,$0F
00114  2D90  65 80 1F              BYTE $65,$80,$1F,$55,$C0,$16,$A5,$C0
00115  2D98  25 5E E0              BYTE $25,$5E,$E0,$09,$7F,$50,$09,$B7
00116  2DA0  90 0D 7E              BYTE $90,$0D,$7E,$50,$0F,$7D,$60,$0F
00117  2DA8  5E 60 0F              BYTE $5E,$60,$0F,$69,$40,$07,$96,$80
00118  2DB0  05 9B E0              BYTE $05,$9B,$E0,$26,$20,$E0,$00,$00
00119  2DB8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00120  2DC0  00 00 00              BYTE $00,$00,$00,$00,$50,$00,$00,$75
00121  2DC8  50 00 FD              BYTE $50,$00,$FD,$C0,$01,$5F,$C0,$01
00122  2DD0  57 40 03              BYTE $57,$40,$03,$75,$50,$07,$7D,$50
00123  2DD8  15 7D F0              BYTE $15,$7D,$F0,$3F,$7D,$74,$1D,$FD
00124  2DE0  54 0D 5F              BYTE $54,$0D,$5F,$50,$07,$F5,$F0,$05
00125  2DE8  F5 D0 15              BYTE $F5,$D0,$15,$DF,$D0,$01,$FF,$50
00126  2DF0  01 50 40              BYTE $01,$50,$40,$01,$00,$50,$00,$00
00127  2DF8  10 00 00              BYTE $10,$00,$00,$00,$00,$00,$00,$00
00128  2E00  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00129  2E08  00 00 00              BYTE $00,$00,$00,$00,$00,$01,$40,$00
00130  2E10  07 C0 01              BYTE $07,$C0,$01,$57,$C0,$01,$5F,$40
00131  2E18  03 D7 50              BYTE $03,$D7,$50,$05,$F7,$D0,$05,$FF
00132  2E20  C0 01 FD              BYTE $C0,$01,$FD,$40,$01,$75,$40,$05
00133  2E28  5F 40 07              BYTE $5F,$40,$07,$FF,$40,$05,$7F,$C0
00134  2E30  01 F5 40              BYTE $01,$F5,$40,$00,$34,$00,$00,$10
00135  2E38  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00136  2E40  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00137  2E48  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00138  2E50  00 00 00              BYTE $00,$00,$00,$1C,$00,$00,$14,$00
00139  2E58  00 55 00              BYTE $00,$55,$00,$01,$DD,$00,$01,$DD
00140  2E60  00 03 DD              BYTE $00,$03,$DD,$00,$01,$5F,$00,$01
00141  2E68  57 00 00              BYTE $57,$00,$00,$F7,$00,$00,$75,$00
00142  2E70  00 51 00              BYTE $00,$51,$00,$00,$00,$00,$00,$00
00143  2E78  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00144  2E80  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00145  2E88  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00146  2E90  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00147  2E98  00 11 00              BYTE $00,$11,$00,$00,$15,$00,$00,$55
00148  2EA0  00 00 55              BYTE $00,$00,$55,$00,$00,$55,$40,$00
00149  2EA8  55 40 00              BYTE $55,$40,$00,$55,$40,$00,$15,$00
00150  2EB0  00 05 00              BYTE $00,$05,$00,$00,$00,$00,$00,$00
00151  2EB8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00152  2EC0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00153  2EC8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00154  2ED0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00155  2ED8  00 00 00              BYTE $00,$00,$00,$00,$54,$00,$00,$14
00156  2EE0  00 00 55              BYTE $00,$00,$55,$00,$00,$54,$00,$00
00157  2EE8  14 00 00              BYTE $14,$00,$00,$10,$00,$00,$00,$00
00158  2EF0  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00159  2EF8  00 00 00              BYTE $00,$00,$00,$00,$00,$00,$00,$00
00160  2F00             
00161  2F00             @          
00162  2F00             INCBIN     "DEREKSEXPLOSIONS.SPT", 5, 16, TRUE
00163  2F00             
00164  2F00             ; CHARACTERSET
00165  2F00             *=$3000
00166  3000             @          
00167  3000  00 00 00   	BYTE	0,0,0,5,10,16,96,128 
00168  3008  01 05 08   	BYTE	1,5,8,144,96,0,0,0 
00169  3010  80 40 40   	BYTE	128,64,64,80,105,6,0,0 
00170  3018  00 00 00   	BYTE	0,0,0,0,132,74,49,1 
00171  3020  80 40 30   	BYTE	128,64,48,8,4,4,6,1 
00172  3028  01 01 02   	BYTE	1,1,2,10,20,16,32,192 
00173  3030  00 00 08   	BYTE	0,0,8,20,36,66,65,129 
00174  3038  00 00 00   	BYTE	0,0,0,0,4,42,209,129 
00175  3040  80 40 40   	BYTE	128,64,64,32,16,16,8,8 
00176  3048  01 01 02   	BYTE	1,1,2,4,2,2,4,8 
00177  3050  04 02 02   	BYTE	4,2,2,4,2,2,1,1 
00178  3058  08 10 20   	BYTE	8,16,32,32,32,64,64,128 
00179  3060  00 00 00   	BYTE	0,0,0,0,0,0,0,255 
00180  3068  63 77 7F   	BYTE	99,119,127,107,99,99,99,0 
00181  3070  66 76 7E   	BYTE	102,118,126,126,110,102,102,0 
00182  3078  3C 66 66   	BYTE	60,102,102,102,102,102,60,0 
00183  3080  7C 66 66   	BYTE	124,102,102,124,96,96,96,0 
00184  3088  3C 66 66   	BYTE	60,102,102,102,102,60,14,0 
00185  3090  7C 66 66   	BYTE	124,102,102,124,120,108,102,0 
00186  3098  3C 66 60   	BYTE	60,102,96,60,6,102,60,0 
00187  30A0  7E 18 18   	BYTE	126,24,24,24,24,24,24,0 
00188  30A8  66 66 66   	BYTE	102,102,102,102,102,102,60,0 
00189  30B0  66 66 66   	BYTE	102,102,102,102,102,60,24,0 
00190  30B8  63 63 63   	BYTE	99,99,99,107,127,119,99,0 
00191  30C0  66 66 3C   	BYTE	102,102,60,24,60,102,102,0 
00192  30C8  66 66 66   	BYTE	102,102,102,60,24,24,24,0 
00193  30D0  7E 06 0C   	BYTE	126,6,12,24,48,96,126,0 
00194  30D8  3C 30 30   	BYTE	60,48,48,48,48,48,60,0 
00195  30E0  0C 12 30   	BYTE	12,18,48,124,48,98,252,0 
00196  30E8  3C 0C 0C   	BYTE	60,12,12,12,12,12,60,0 
00197  30F0  00 18 3C   	BYTE	0,24,60,126,24,24,24,24 
00198  30F8  00 10 30   	BYTE	0,16,48,127,127,48,16,0 
00199  3100  00 00 00   	BYTE	0,0,0,0,0,0,0,0 
00200  3108  18 18 18   	BYTE	24,24,24,24,0,0,24,0 
00201  3110  66 66 66   	BYTE	102,102,102,0,0,0,0,0 
00202  3118  66 66 FF   	BYTE	102,102,255,102,255,102,102,0 
00203  3120  18 3E 60   	BYTE	24,62,96,60,6,124,24,0 
00204  3128  62 66 0C   	BYTE	98,102,12,24,48,102,70,0 
00205  3130  3C 66 3C   	BYTE	60,102,60,56,103,102,63,0 
00206  3138  06 0C 18   	BYTE	6,12,24,0,0,0,0,0 
00207  3140  0C 18 30   	BYTE	12,24,48,48,48,24,12,0 
00208  3148  30 18 0C   	BYTE	48,24,12,12,12,24,48,0 
00209  3150  00 66 3C   	BYTE	0,102,60,255,60,102,0,0 
00210  3158  00 18 18   	BYTE	0,24,24,126,24,24,0,0 
00211  3160  00 00 00   	BYTE	0,0,0,0,0,24,24,48 
00212  3168  00 00 00   	BYTE	0,0,0,126,0,0,0,0 
00213  3170  00 00 00   	BYTE	0,0,0,0,0,24,24,0 
00214  3178  00 03 06   	BYTE	0,3,6,12,24,48,96,0 
00215  3180  3C 66 6E   	BYTE	60,102,110,118,102,102,60,0 
00216  3188  18 18 38   	BYTE	24,24,56,24,24,24,126,0 
00217  3190  3C 66 06   	BYTE	60,102,6,12,48,96,126,0 
00218  3198  3C 66 06   	BYTE	60,102,6,28,6,102,60,0 
00219  31A0  06 0E 1E   	BYTE	6,14,30,102,127,6,6,0 
00220  31A8  7E 60 7C   	BYTE	126,96,124,6,6,102,60,0 
00221  31B0  3C 66 60   	BYTE	60,102,96,124,102,102,60,0 
00222  31B8  7E 66 0C   	BYTE	126,102,12,24,24,24,24,0 
00223  31C0  3C 66 66   	BYTE	60,102,102,60,102,102,60,0 
00224  31C8  3C 66 66   	BYTE	60,102,102,62,6,102,60,0 
00225  31D0  00 00 18   	BYTE	0,0,24,0,0,24,0,0 
00226  31D8  00 00 18   	BYTE	0,0,24,0,0,24,24,48 
00227  31E0  0E 18 30   	BYTE	14,24,48,96,48,24,14,0 
00228  31E8  00 00 7E   	BYTE	0,0,126,0,126,0,0,0 
00229  31F0  70 18 0C   	BYTE	112,24,12,6,12,24,112,0 
00230  31F8  3C 66 06   	BYTE	60,102,6,12,24,0,24,0 
00231  3200  00 00 00   	BYTE	0,0,0,255,255,0,0,0 
00232  3208  08 1C 3E   	BYTE	8,28,62,127,127,28,62,0 
00233  3210  18 18 18   	BYTE	24,24,24,24,24,24,24,24 
00234  3218  00 00 00   	BYTE	0,0,0,255,255,0,0,0 
00235  3220  00 00 FF   	BYTE	0,0,255,255,0,0,0,0 
00236  3228  00 FF FF   	BYTE	0,255,255,0,0,0,0,0 
00237  3230  00 00 00   	BYTE	0,0,0,0,255,255,0,0 
00238  3238  30 30 30   	BYTE	48,48,48,48,48,48,48,48 
00239  3240  0C 0C 0C   	BYTE	12,12,12,12,12,12,12,12 
00240  3248  00 00 00   	BYTE	0,0,0,224,240,56,24,24 
00241  3250  18 18 1C   	BYTE	24,24,28,15,7,0,0,0 
00242  3258  18 18 38   	BYTE	24,24,56,240,224,0,0,0 
00243  3260  C0 C0 C0   	BYTE	192,192,192,192,192,192,255,255 
00244  3268  C0 E0 70   	BYTE	192,224,112,56,28,14,7,3 
00245  3270  03 07 0E   	BYTE	3,7,14,28,56,112,224,192 
00246  3278  FF FF C0   	BYTE	255,255,192,192,192,192,192,192 
00247  3280  FF FF 03   	BYTE	255,255,3,3,3,3,3,3 
00248  3288  00 3C 7E   	BYTE	0,60,126,126,126,126,60,0 
00249  3290  00 00 00   	BYTE	0,0,0,0,0,255,255,0 
00250  3298  36 7F 7F   	BYTE	54,127,127,127,62,28,8,0 
00251  32A0  60 60 60   	BYTE	96,96,96,96,96,96,96,96 
00252  32A8  00 00 00   	BYTE	0,0,0,7,15,28,24,24 
00253  32B0  C3 E7 7E   	BYTE	195,231,126,60,60,126,231,195 
00254  32B8  00 3C 7E   	BYTE	0,60,126,102,102,126,60,0 
00255  32C0  18 18 66   	BYTE	24,24,102,102,24,24,60,0 
00256  32C8  06 06 06   	BYTE	6,6,6,6,6,6,6,6 
00257  32D0  08 1C 3E   	BYTE	8,28,62,127,62,28,8,0 
00258  32D8  18 18 18   	BYTE	24,24,24,255,255,24,24,24 
00259  32E0  C0 C0 30   	BYTE	192,192,48,48,192,192,48,48 
00260  32E8  18 18 18   	BYTE	24,24,24,24,24,24,24,24 
00261  32F0  00 00 03   	BYTE	0,0,3,62,118,54,54,0 
00262  32F8  FF 7F 3F   	BYTE	255,127,63,31,15,7,3,1 
00263  3300  00 00 00   	BYTE	0,0,0,0,0,0,0,0 
00264  3308  F0 F0 F0   	BYTE	240,240,240,240,240,240,240,240 
00265  3310  00 00 00   	BYTE	0,0,0,0,255,255,255,255 
00266  3318  FF 00 00   	BYTE	255,0,0,0,0,0,0,0 
00267  3320  00 00 00   	BYTE	0,0,0,0,0,0,0,255 
00268  3328  C0 C0 C0   	BYTE	192,192,192,192,192,192,192,192 
00269  3330  CC CC 33   	BYTE	204,204,51,51,204,204,51,51 
00270  3338  03 03 03   	BYTE	3,3,3,3,3,3,3,3 
00271  3340  00 00 00   	BYTE	0,0,0,0,204,204,51,51 
00272  3348  FF FE FC   	BYTE	255,254,252,248,240,224,192,128 
00273  3350  03 03 03   	BYTE	3,3,3,3,3,3,3,3 
00274  3358  18 18 18   	BYTE	24,24,24,31,31,24,24,24 
00275  3360  00 00 00   	BYTE	0,0,0,0,15,15,15,15 
00276  3368  18 18 18   	BYTE	24,24,24,31,31,0,0,0 
00277  3370  00 00 00   	BYTE	0,0,0,248,248,24,24,24 
00278  3378  00 00 00   	BYTE	0,0,0,0,0,0,255,255 
00279  3380  00 00 00   	BYTE	0,0,0,31,31,24,24,24 
00280  3388  18 18 18   	BYTE	24,24,24,255,255,0,0,0 
00281  3390  00 00 00   	BYTE	0,0,0,255,255,24,24,24 
00282  3398  18 18 18   	BYTE	24,24,24,248,248,24,24,24 
00283  33A0  C0 C0 C0   	BYTE	192,192,192,192,192,192,192,192 
00284  33A8  E0 E0 E0   	BYTE	224,224,224,224,224,224,224,224 
00285  33B0  07 07 07   	BYTE	7,7,7,7,7,7,7,7 
00286  33B8  FF FF 00   	BYTE	255,255,0,0,0,0,0,0 
00287  33C0  FF FF FF   	BYTE	255,255,255,0,0,0,0,0 
00288  33C8  00 00 00   	BYTE	0,0,0,0,0,255,255,255 
00289  33D0  03 03 03   	BYTE	3,3,3,3,3,3,255,255 
00290  33D8  00 00 00   	BYTE	0,0,0,0,240,240,240,240 
00291  33E0  0F 0F 0F   	BYTE	15,15,15,15,0,0,0,0 
00292  33E8  18 18 18   	BYTE	24,24,24,248,248,0,0,0 
00293  33F0  F0 F0 F0   	BYTE	240,240,240,240,0,0,0,0 
00294  33F8  F0 F0 F0   	BYTE	240,240,240,240,15,15,15,15 
00295  3400             @          
00296  3400             INCBIN     "LANDSCAPE.CST", 0, 127
00297  3400             
00298  3400             *=$0820
00299  0820  4C BD 09              JMP GAMESTART
00300  0823             
00301  0823             ;*************************************************************************
00302  0823             ;* GAME WORKING VARIABLE SPACE                                           *
00303  0823             ;*************************************************************************
00304  0823             
00305  0823             ; BINARY FRACTION FORMAT :-
00306  0823             ;     FIRST BYTE IS FRACTION = 1/128 -> 1/2
00307  0823             ;     SECOND BYTE IS WHOLE NUMBER
00308  0823             
00309  0823             LUNALANDERXFRAC 
00310  0823  00                    BRK
00311  0824             
00312  0824             LUNALANDERXLO 
00313  0824  00                    BRK
00314  0825             
00315  0825             LUNALANDERXHI 
00316  0825  00                    BRK
00317  0826             
00318  0826             LUNALANDERYFRAC 
00319  0826  00                    BRK
00320  0827             
00321  0827             LUNALANDERY 
00322  0827  00                    BRK
00323  0828             
00324  0828             LUNALANDERSPNO 
00325  0828  00                    BYTE 0
00326  0829             
00327  0829             LUNALANDERCOLOUR 
00328  0829  00                    BRK
00329  082A             
00330  082A             THRUSTSPNO 
00331  082A  01                    BYTE 1
00332  082B             
00333  082B             THRUSTFRAMENO 
00334  082B  00                    BRK
00335  082C             
00336  082C             THRUSTCOLOUR 
00337  082C  00                    BRK
00338  082D             
00339  082D             MANUOVERSPNO 
00340  082D  02                    BYTE 2
00341  082E             
00342  082E             MANUOVERFRAMENO 
00343  082E  00                    BRK
00344  082F             
00345  082F             MANUOVERCOLOUR 
00346  082F  00                    BRK
00347  0830             
00348  0830             VERTICALVELOCITYFRAC 
00349  0830  00                    BRK
00350  0831             
00351  0831             VERTICALVELOCITY 
00352  0831  00                    BRK
00353  0832             
00354  0832             GRAVITYFRAC 
00355  0832  00                    BRK
00356  0833             
00357  0833             GRAVITY
00358  0833  00                    BRK
00359  0834             
00360  0834             THRUSTFRAC 
00361  0834  00                    BRK
00362  0835             
00363  0835             THRUST
00364  0835  00                    BRK
00365  0836             
00366  0836             HORIZONTALVELOCITYFRAC 
00367  0836  00                    BRK
00368  0837             
00369  0837             HORIZONTALVELOCITY 
00370  0837  00                    BRK
00371  0838             
00372  0838             HORIZONTALINERTIAFRAC 
00373  0838  00                    BRK
00374  0839             
00375  0839             HORIZONTALINERTIA 
00376  0839  00                    BRK
00377  083A             
00378  083A             GAMELOOPFRAMETRACKER 
00379  083A  00                    BRK
00380  083B             
00381  083B             FRAMESKIPRATE 
00382  083B  03                    BYTE 03
00383  083C             
00384  083C             ;===============================================================================
00385  083C             ; CONSTANTS
00386  083C             
00387  083C             SPRITEANIMSMAX = 8
00388  083C             
00389  083C             ;===============================================================================
00390  083C             ; VARIABLES
00391  083C             
00392  083C  00 00 00   SPRITEANIMSACTIVE DCB SPRITEANIMSMAX, 0
00393  0844  00 00 00   SPRITEANIMSSTARTFRAME DCB SPRITEANIMSMAX, 0
00394  084C  00 00 00   SPRITEANIMSFRAME DCB SPRITEANIMSMAX, 0
00395  0854  00 00 00   SPRITEANIMSENDFRAME DCB SPRITEANIMSMAX, 0
00396  085C  00 00 00   SPRITEANIMSSTOPFRAME DCB SPRITEANIMSMAX, 0
00397  0864  00 00 00   SPRITEANIMSSPEED DCB SPRITEANIMSMAX, 0
00398  086C  00 00 00   SPRITEANIMSDELAY DCB SPRITEANIMSMAX, 0
00399  0874  00 00 00   SPRITEANIMSLOOP DCB SPRITEANIMSMAX, 0
00400  087C             
00401  087C  00         SPRITEANIMSCURRENT BYTE 0
00402  087D  00         SPRITEANIMSFRAMECURRENT BYTE 0
00403  087E  00         SPRITEANIMSENDFRAMECURRENT BYTE 0
00404  087F             
00405  087F  01 02 04   SPRITENUMBERMASK BYTE %00000001, %00000010, %00000100, %00001000
00406  0883  10 20 40              BYTE %00010000, %00100000, %01000000, %10000000
00407  0887             
00408  0887             ;===============================================================================
00409  0887             ; MACROS/SUBROUTINES
00410  0887             
00411  0887             
00412  0887             DEFM       LIBSPRITE_DIDCOLLIDEWITHSPRITE_A  ; /1 = SPRITE NUMBER (ADDRESS)
00413  0887                        
00414  0887                        LDY /1
00415  0887                        LDA SPRITENUMBERMASK,Y
00416  0887                        AND SPSPCL
00417  0887                        
00418  0887                        ENDM
00419  0887             
00420  0887             ;===============================================================================
00421  0887             
00422  0887             DEFM       LIBSPRITE_ENABLE_AV                ; /1 = SPRITE NUMBER (ADDRESS)
00423  0887                        ; /2 = ENABLE/DISABLE (VALUE)
00424  0887                        LDY /1
00425  0887                        LDA SPRITENUMBERMASK,Y
00426  0887                        
00427  0887                        LDY #/2
00428  0887                        BEQ @DISABLE
00429  0887             @ENABLE
00430  0887                        ORA SPENA ; MERGE WITH THE CURRENT SPRITEENABLE REGISTER
00431  0887                        STA SPENA ; SET THE NEW VALUE INTO THE SPRITEENABLE REGISTER
00432  0887                        JMP @DONE
00433  0887             @DISABLE
00434  0887                        EOR #$FF ; GET MASK COMPLIMENT
00435  0887                        AND SPENA
00436  0887                        STA SPENA
00437  0887             @DONE
00438  0887                        ENDM
00439  0887             
00440  0887             ;==============================================================================
00441  0887             
00442  0887             DEFM       LIBSPRITE_ISANIMPLAYING_A      ; /1 = SPRITE NUMBER    (ADDRESS)
00443  0887             
00444  0887                        LDY /1
00445  0887                        LDA SPRITEANIMSACTIVE,Y
00446  0887             
00447  0887                        ENDM
00448  0887             
00449  0887             ;===============================================================================
00450  0887             
00451  0887             DEFM       LIBSPRITE_MULTICOLORENABLE_AA    ; /1 = SPRITE NUMBER (ADDRESS)
00452  0887                        ; /2 = ENABLE/DISABLE (ADDRESS)
00453  0887                        LDY /1
00454  0887                        LDA SPRITENUMBERMASK,Y
00455  0887                        
00456  0887                        LDY /2
00457  0887                        BEQ @DISABLE
00458  0887             @ENABLE
00459  0887                        ORA SPMC
00460  0887                        STA SPMC
00461  0887                        JMP @DONE
00462  0887             @DISABLE
00463  0887                        EOR #$FF ; GET MASK COMPLIMENT
00464  0887                        AND SPMC
00465  0887                        STA SPMC
00466  0887             @DONE
00467  0887                        ENDM
00468  0887             
00469  0887             ;===============================================================================
00470  0887             
00471  0887             DEFM       LIBSPRITE_MULTICOLORENABLE_AV   ; /1 = SPRITE NUMBER (ADDRESS)
00472  0887                        ; /2 = ENABLE/DISABLE (VALUE)
00473  0887                        LDY /1
00474  0887                        LDA SPRITENUMBERMASK,Y
00475  0887                        
00476  0887                        LDY #/2
00477  0887                        BEQ @DISABLE
00478  0887             @ENABLE
00479  0887                        ORA SPMC
00480  0887                        STA SPMC
00481  0887                        JMP @DONE
00482  0887             @DISABLE
00483  0887                        EOR #$FF ; GET MASK COMPLIMENT
00484  0887                        AND SPMC
00485  0887                        STA SPMC
00486  0887             @DONE
00487  0887                        ENDM
00488  0887             
00489  0887             ;==============================================================================
00490  0887             
00491  0887             DEFM       LIBSPRITE_PLAYANIM_AVVVV        ; /1 = SPRITE NUMBER    (ADDRESS)
00492  0887                        ; /2 = STARTFRAME       (VALUE)
00493  0887                        ; /3 = ENDFRAME         (VALUE)
00494  0887                        ; /4 = SPEED            (VALUE)
00495  0887                        ; /5 = LOOP TRUE/FALSE  (VALUE)
00496  0887             
00497  0887                        LDY /1
00498  0887             
00499  0887                        LDA #TRUE
00500  0887                        STA SPRITEANIMSACTIVE,Y
00501  0887                        LDA #/2
00502  0887                        STA SPRITEANIMSSTARTFRAME,Y
00503  0887                        STA SPRITEANIMSFRAME,Y
00504  0887                        LDA #/3
00505  0887                        STA SPRITEANIMSENDFRAME,Y
00506  0887                        LDA #/4
00507  0887                        STA SPRITEANIMSSPEED,Y
00508  0887                        STA SPRITEANIMSDELAY,Y
00509  0887                        LDA #/5
00510  0887                        STA SPRITEANIMSLOOP,Y
00511  0887             
00512  0887                        ENDM
00513  0887             
00514  0887             ;===============================================================================
00515  0887             
00516  0887             DEFM       LIBSPRITE_SETCOLOR_AV           ; /1 = SPRITE NUMBER    (ADDRESS)
00517  0887                        ; /2 = COLOR            (VALUE)
00518  0887                        LDY /1
00519  0887                        LDA #/2
00520  0887                        STA SP0COL,Y
00521  0887                        ENDM
00522  0887             
00523  0887             ;===============================================================================
00524  0887             
00525  0887             DEFM       LIBSPRITE_SETCOLOR_AA           ; /1 = SPRITE NUMBER    (ADDRESS)
00526  0887                        ; /2 = COLOR            (ADDRESS)
00527  0887                        LDY /1
00528  0887                        LDA /2
00529  0887                        STA SP0COL,Y
00530  0887                        ENDM
00531  0887             
00532  0887             ;==============================================================================
00533  0887             
00534  0887             DEFM       LIBSPRITE_SETFRAME_AA           ; /1 = SPRITE NUMBER    (ADDRESS)
00535  0887                        ; /2 = ANIM INDEX       (ADDRESS)
00536  0887                        LDY /1
00537  0887                        
00538  0887                        CLC     ; CLEAR CARRY BEFORE ADD
00539  0887                        LDA /2  ; GET FIRST NUMBER
00540  0887                        ADC #SPRITERAM ; ADD
00541  0887                        
00542  0887                        STA SPRITE0,Y
00543  0887                        ENDM
00544  0887             
00545  0887             ;===============================================================================
00546  0887             
00547  0887             DEFM       LIBSPRITE_SETFRAME_AV           ; /1 = SPRITE NUMBER    (ADDRESS)
00548  0887                        ; /2 = ANIM INDEX       (VALUE)
00549  0887                        LDY /1
00550  0887                        
00551  0887                        CLC     ; CLEAR CARRY BEFORE ADD
00552  0887                        LDA #/2  ; GET FIRST NUMBER
00553  0887                        ADC #SPRITERAM ; ADD
00554  0887                        
00555  0887                        STA SPRITE0,Y
00556  0887                        ENDM
00557  0887             
00558  0887             ;===============================================================================
00559  0887             
00560  0887             DEFM       LIBSPRITE_SETMULTICOLORS_VV     ; /1 = COLOR 1          (VALUE)
00561  0887                        ; /2 = COLOR 2          (VALUE)
00562  0887                        LDA #/1
00563  0887                        STA SPMC0
00564  0887                        LDA #/2
00565  0887                        STA SPMC1
00566  0887                        ENDM
00567  0887             
00568  0887             ;===============================================================================
00569  0887             
00570  0887             DEFM       LIBSPRITE_SETPOSITION_AAAA      ; /1 = SPRITE NUMBER    (ADDRESS)
00571  0887                        ; /2 = XPOS HIGH BYTE   (ADDRESS)
00572  0887                        ; /3 = XPOS LOW BYTE    (ADDRESS)
00573  0887                        ; /4 = YPOS             (ADDRESS)
00574  0887             
00575  0887                        LDA /1                  ; GET SPRITE NUMBER
00576  0887                        ASL                     ; *2 AS REGISTERS LAID OUT 2 APART
00577  0887                        TAY                     ; COPY ACCUMULATOR TO Y REGISTER
00578  0887             
00579  0887                        LDA /3                  ; GET XPOS LOW BYTE
00580  0887                        STA SP0X,Y              ; SET THE XPOS SPRITE REGISTER
00581  0887                        LDA /4                  ; GET YPOS
00582  0887                        STA SP0Y,Y              ; SET THE YPOS SPRITE REGISTER
00583  0887                        
00584  0887                        LDY /1
00585  0887                        LDA SPRITENUMBERMASK,Y  ; GET SPRITE MASK
00586  0887                        
00587  0887                        EOR #$FF                ; GET COMPLIMENT
00588  0887                        AND MSIGX               ; CLEAR THE BIT
00589  0887                        STA MSIGX               ; AND STORE
00590  0887             
00591  0887                        LDY /2                  ; GET XPOS HIGH BYTE
00592  0887                        BEQ @END                ; SKIP IF XPOS HIGH BYTE IS ZERO
00593  0887                        LDY /1
00594  0887                        LDA SPRITENUMBERMASK,Y  ; GET SPRITE MASK
00595  0887                        
00596  0887                        ORA MSIGX               ; SET THE BIT
00597  0887                        STA MSIGX               ; AND STORE
00598  0887             @END
00599  0887                        ENDM
00600  0887             
00601  0887             ;===============================================================================
00602  0887             
00603  0887             DEFM       LIBSPRITE_SETPOSITION_VAAA      ; /1 = SPRITE NUMBER    (VALUE)
00604  0887                        ; /2 = XPOS HIGH BYTE   (ADDRESS)
00605  0887                        ; /3 = XPOS LOW BYTE    (ADDRESS)
00606  0887                        ; /4 = YPOS             (ADDRESS)
00607  0887             
00608  0887                        LDY #/1*2               ; *2 AS REGISTERS LAID OUT 2 APART
00609  0887                        LDA /3                  ; GET XPOS LOW BYTE
00610  0887                        STA SP0X,Y              ; SET THE XPOS SPRITE REGISTER
00611  0887                        LDA /4                  ; GET YPOS
00612  0887                        STA SP0Y,Y              ; SET THE YPOS SPRITE REGISTER
00613  0887                        
00614  0887                        LDA #1<<#/1             ; SHIFT 1 INTO SPRITE BIT POSITION
00615  0887                        EOR #$FF                ; GET COMPLIMENT
00616  0887                        AND MSIGX               ; CLEAR THE BIT
00617  0887                        STA MSIGX               ; AND STORE
00618  0887             
00619  0887                        LDY /2                  ; GET XPOS HIGH BYTE
00620  0887                        BEQ @END                ; SKIP IF XPOS HIGH BYTE IS ZERO
00621  0887                        LDA #1<<#/1             ; SHIFT 1 INTO SPRITE BIT POSITION
00622  0887                        ORA MSIGX               ; SET THE BIT
00623  0887                        STA MSIGX               ; AND STORE
00624  0887             @END
00625  0887                        ENDM
00626  0887             
00627  0887             
00628  0887             ;===============================================================================
00629  0887             
00630  0887             DEFM       LIBSPRITE_SETPRIORITY_AV ; /1 = SPRITE NUMBER           (ADDRESS)
00631  0887                        ; /2 = TRUE = BACK, FALSE = FRONT (VALUE)
00632  0887                        LDY /1
00633  0887                        LDA SPRITENUMBERMASK,Y
00634  0887                        
00635  0887                        LDY #/2
00636  0887                        BEQ @DISABLE
00637  0887             @ENABLE
00638  0887                        ORA SPBGPR ; MERGE WITH THE CURRENT SPBGPR REGISTER
00639  0887                        STA SPBGPR ; SET THE NEW VALUE INTO THE SPBGPR REGISTER
00640  0887                        JMP @DONE
00641  0887             @DISABLE
00642  0887                        EOR #$FF ; GET MASK COMPLIMENT
00643  0887                        AND SPBGPR
00644  0887                        STA SPBGPR
00645  0887             @DONE
00646  0887                        ENDM
00647  0887             
00648  0887             ;==============================================================================
00649  0887             
00650  0887             DEFM       LIBSPRITE_STOPANIM_A            ; /1 = SPRITE NUMBER    (ADDRESS)
00651  0887             
00652  0887                        LDY /1
00653  0887                        LDA #0
00654  0887                        STA SPRITEANIMSACTIVE,Y
00655  0887             
00656  0887                        ENDM
00657  0887             
00658  0887             ;==============================================================================
00659  0887             
00660  0887             LIBSPRITESUPDATE 
00661  0887             
00662  0887  A2 00                 LDX #0
00663  0889             LSOULOOP
00664  0889                        ; SKIP THIS SPRITE ANIM IF NOT ACTIVE
00665  0889  BD 3C 08              LDA SPRITEANIMSACTIVE,X
00666  088C  D0 03                 BNE LSOUACTIVE
00667  088E  4C F0 08              JMP LSOUSKIP
00668  0891             LSOUACTIVE 
00669  0891             
00670  0891  8E 7C 08              STX SPRITEANIMSCURRENT
00671  0894  BD 4C 08              LDA SPRITEANIMSFRAME,X
00672  0897  8D 7D 08              STA SPRITEANIMSFRAMECURRENT
00673  089A             
00674  089A  BD 54 08              LDA SPRITEANIMSENDFRAME,X
00675  089D  8D 7E 08              STA SPRITEANIMSENDFRAMECURRENT
00676  08A0                        
00677  08A0             
00678  08A0             
00679  08A0  AC 7C 08              LDY SPRITEANIMSCURRENT
00680  08A3                        
00681  08A3  18                    CLC
00682  08A4  AD 7D 08              LDA SPRITEANIMSFRAMECURRENT
00683  08A7  69 AA                 ADC #SPRITERAM
00684  08A9                        
00685  08A9  99 F8 07              STA SPRITE0,Y
00686  08AC             
00687  08AC             
00688  08AC  DE 6C 08              DEC SPRITEANIMSDELAY,X
00689  08AF  D0 3F                 BNE LSOUSKIP
00690  08B1             
00691  08B1                        ; RESET THE DELAY
00692  08B1  BD 64 08              LDA SPRITEANIMSSPEED,X
00693  08B4  9D 6C 08              STA SPRITEANIMSDELAY,X
00694  08B7             
00695  08B7                        ; CHANGE THE FRAME
00696  08B7  FE 4C 08              INC SPRITEANIMSFRAME,X
00697  08BA                        
00698  08BA                        ; CHECK IF REACHED THE END FRAME
00699  08BA  AD 7E 08              LDA SPRITEANIMSENDFRAMECURRENT
00700  08BD  DD 4C 08              CMP SPRITEANIMSFRAME,X
00701  08C0  B0 2E                 BCS LSOUSKIP
00702  08C2             
00703  08C2                        ; CHECK IF LOOPING
00704  08C2  BD 74 08              LDA SPRITEANIMSLOOP,X
00705  08C5  F0 09                 BEQ LSOUDESTROY
00706  08C7             
00707  08C7                        ; RESET THE FRAME
00708  08C7  BD 44 08              LDA SPRITEANIMSSTARTFRAME,X
00709  08CA  9D 4C 08              STA SPRITEANIMSFRAME,X
00710  08CD  4C F0 08              JMP LSOUSKIP
00711  08D0             
00712  08D0             LSOUDESTROY 
00713  08D0                        ; TURN OFF
00714  08D0  A9 00                 LDA #FALSE
00715  08D2  9D 3C 08              STA SPRITEANIMSACTIVE,X
00716  08D5             
00717  08D5             
00718  08D5  AC 7C 08              LDY SPRITEANIMSCURRENT
00719  08D8  B9 7F 08              LDA SPRITENUMBERMASK,Y
00720  08DB                        
00721  08DB  A0 00                 LDY #FALSE
00722  08DD  F0 09                 BEQ @DISABLE
00723  08DF             @ENABLE
00724  08DF  0D 15 D0              ORA SPENA
00725  08E2  8D 15 D0              STA SPENA
00726  08E5  4C F0 08              JMP @DONE
00727  08E8             @DISABLE
00728  08E8  49 FF                 EOR #$FF
00729  08EA  2D 15 D0              AND SPENA
00730  08ED  8D 15 D0              STA SPENA
00731  08F0             @DONE
00732  08F0             
00733  08F0             
00734  08F0             LSOUSKIP
00735  08F0                        ; LOOP FOR EACH SPRITE ANIM
00736  08F0  E8                    INX
00737  08F1  E0 08                 CPX #SPRITEANIMSMAX
00738  08F3                        ;BNE LSULOOP
00739  08F3  F0 03                 BEQ LSOUFINISHED
00740  08F5  4C 89 08              JMP LSOULOOP
00741  08F8             LSOUFINISHED 
00742  08F8             
00743  08F8  60                    RTS
00744  08F9             ;===============================================================================
00745  08F9             ; MACROS/SUBROUTINES
00746  08F9             
00747  08F9             DEFM       LIBMATH_ABS_AA  ; /1 = NUMBER (ADDRESS)
00748  08F9                        ; /2 = RESULT (ADDRESS)
00749  08F9                        LDA /1
00750  08F9                        BPL @POSITIVE
00751  08F9                        EOR #$FF        ; INVERT THE BITS
00752  08F9                        STA /2
00753  08F9                        INC /2          ; ADD 1 TO GIVE THE TWO'S COMPLIMENT
00754  08F9                        JMP @DONE
00755  08F9             @POSITIVE
00756  08F9                        STA /2
00757  08F9             @DONE
00758  08F9                        ENDM
00759  08F9             
00760  08F9             ;==============================================================================
00761  08F9             
00762  08F9             DEFM       LIBMATH_ADD8BIT_AAA
00763  08F9                        ; /1 = 1ST NUMBER (ADDRESS)
00764  08F9                        ; /2 = 2ND NUMBER (ADDRESS)
00765  08F9                        ; /3 = SUM (ADDRESS)
00766  08F9                        CLC     ; CLEAR CARRY BEFORE ADD
00767  08F9                        LDA /1  ; GET FIRST NUMBER
00768  08F9                        ADC /2 ; ADD TO SECOND NUMBER
00769  08F9                        STA /3  ; STORE IN SUM
00770  08F9                        ENDM
00771  08F9             
00772  08F9             ;==============================================================================
00773  08F9             
00774  08F9             DEFM       LIBMATH_ADD8BIT_AVA
00775  08F9                        ; /1 = 1ST NUMBER (ADDRESS)
00776  08F9                        ; /2 = 2ND NUMBER (VALUE)
00777  08F9                        ; /3 = SUM (ADDRESS)
00778  08F9                        CLC     ; CLEAR CARRY BEFORE ADD
00779  08F9                        LDA /1  ; GET FIRST NUMBER
00780  08F9                        ADC #/2 ; ADD TO SECOND NUMBER
00781  08F9                        STA /3  ; STORE IN SUM
00782  08F9                        ENDM
00783  08F9             
00784  08F9             ;==============================================================================
00785  08F9             
00786  08F9             DEFM       LIBMATH_ADD16BIT_AAVAAA
00787  08F9                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00788  08F9                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00789  08F9                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00790  08F9                        ; /4 = 2ND NUMBER LOW BYTE (ADDRESS)
00791  08F9                        ; /5 = SUM HIGH BYTE (ADDRESS)
00792  08F9                        ; /6 = SUM LOW BYTE (ADDRESS)
00793  08F9                        CLC     ; CLEAR CARRY BEFORE FIRST ADD
00794  08F9                        LDA /2  ; GET LSB OF FIRST NUMBER
00795  08F9                        ADC /4  ; ADD LSB OF SECOND NUMBER
00796  08F9                        STA /6  ; STORE IN LSB OF SUM
00797  08F9                        LDA /1  ; GET MSB OF FIRST NUMBER
00798  08F9                        ADC #/3 ; ADD CARRY AND MSB OF NUM2
00799  08F9                        STA /5  ; STORE SUM IN MSB OF SUM
00800  08F9                        ENDM
00801  08F9             
00802  08F9             ;==============================================================================
00803  08F9             
00804  08F9             DEFM       LIBMATH_ADD16BIT_AAVVAA
00805  08F9                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00806  08F9                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00807  08F9                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00808  08F9                        ; /4 = 2ND NUMBER LOW BYTE (VALUE)
00809  08F9                        ; /5 = SUM HIGH BYTE (ADDRESS)
00810  08F9                        ; /6 = SUM LOW BYTE (ADDRESS)
00811  08F9                        CLC     ; CLEAR CARRY BEFORE FIRST ADD
00812  08F9                        LDA /2  ; GET LSB OF FIRST NUMBER
00813  08F9                        ADC #/4 ; ADD LSB OF SECOND NUMBER
00814  08F9                        STA /6  ; STORE IN LSB OF SUM
00815  08F9                        LDA /1  ; GET MSB OF FIRST NUMBER
00816  08F9                        ADC #/3 ; ADD CARRY AND MSB OF NUM2
00817  08F9                        STA /5  ; STORE SUM IN MSB OF SUM
00818  08F9                        ENDM
00819  08F9             
00820  08F9             ;==============================================================================
00821  08F9             
00822  08F9             DEFM       LIBMATH_MIN8BIT_AV      ; /1 = NUMBER 1 (ADDRESS)
00823  08F9                        ; /2 = NUMBER 2 (VALUE)
00824  08F9                        
00825  08F9                        LDA #/2                 ; LOAD NUMBER 2
00826  08F9                        CMP /1                  ; COMPARE WITH NUMBER 1
00827  08F9                        BCS @SKIP               ; IF NUMBER 2 >= NUMBER 1 THEN SKIP
00828  08F9                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00829  08F9             @SKIP
00830  08F9                        ENDM
00831  08F9             
00832  08F9             ;==============================================================================
00833  08F9             
00834  08F9             DEFM       LIBMATH_MAX8BIT_AV      ; /1 = NUMBER 1 (ADDRESS)
00835  08F9                        ; /2 = NUMBER 2 (VALUE)
00836  08F9                        
00837  08F9                        LDA #/2                 ; LOAD NUMBER 2
00838  08F9                        CMP /1                  ; COMPARE WITH NUMBER 1
00839  08F9                        BCC @SKIP               ; IF NUMBER 2 < NUMBER 1 THEN SKIP
00840  08F9                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00841  08F9             @SKIP
00842  08F9                        ENDM
00843  08F9             
00844  08F9             ;==============================================================================
00845  08F9             
00846  08F9             DEFM       LIBMATH_MIN16BIT_AAVV   ; /1 = NUMBER 1 HIGH (ADDRESS)
00847  08F9                        ; /2 = NUMBER 1 LOW (ADDRESS)
00848  08F9                        ; /3 = NUMBER 2 HIGH (VALUE)
00849  08F9                        ; /4 = NUMBER 2 LOW (VALUE)
00850  08F9                        
00851  08F9                        ; HIGH BYTE
00852  08F9                        LDA /1                  ; LOAD NUMBER 1
00853  08F9                        CMP #/3                 ; COMPARE WITH NUMBER 2
00854  08F9                        BMI @SKIP               ; IF NUMBER 1 < NUMBER 2 THEN SKIP
00855  08F9                        LDA #/3
00856  08F9                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00857  08F9             
00858  08F9                        ; LOW BYTE
00859  08F9                        LDA #/4                 ; LOAD NUMBER 2
00860  08F9                        CMP /2                  ; COMPARE WITH NUMBER 1
00861  08F9                        BCS @SKIP               ; IF NUMBER 2 >= NUMBER 1 THEN SKIP
00862  08F9                        STA /2                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00863  08F9             @SKIP
00864  08F9                        ENDM
00865  08F9             
00866  08F9             ;==============================================================================
00867  08F9             
00868  08F9             DEFM       LIBMATH_MAX16BIT_AAVV   ; /1 = NUMBER 1 HIGH (ADDRESS)
00869  08F9                        ; /2 = NUMBER 1 LOW (ADDRESS)
00870  08F9                        ; /3 = NUMBER 2 HIGH (VALUE)
00871  08F9                        ; /4 = NUMBER 2 LOW (VALUE)
00872  08F9                        
00873  08F9                        ; HIGH BYTE
00874  08F9                        LDA #/3                 ; LOAD NUMBER 2
00875  08F9                        CMP /1                  ; COMPARE WITH NUMBER 1
00876  08F9                        BCC @SKIP               ; IF NUMBER 2 < NUMBER 1 THEN SKIP
00877  08F9                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00878  08F9             
00879  08F9                        ; LOW BYTE
00880  08F9                        LDA #/4                 ; LOAD NUMBER 2
00881  08F9                        CMP /2                  ; COMPARE WITH NUMBER 1
00882  08F9                        BCC @SKIP               ; IF NUMBER 2 < NUMBER 1 THEN SKIP
00883  08F9                        STA /2                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00884  08F9             
00885  08F9             @SKIP
00886  08F9                        ENDM
00887  08F9             
00888  08F9             ;==============================================================================
00889  08F9             
00890  08F9             DEFM       LIBMATH_SUB8BIT_AAA
00891  08F9                        ; /1 = 1ST NUMBER (ADDRESS)
00892  08F9                        ; /2 = 2ND NUMBER (ADDRESS)
00893  08F9                        ; /3 = SUM (ADDRESS)
00894  08F9                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00895  08F9                        LDA /1  ; GET FIRST NUMBER
00896  08F9                        SBC /2  ; SUBTRACT SECOND NUMBER
00897  08F9                        STA /3  ; STORE IN SUM
00898  08F9                        ENDM
00899  08F9             
00900  08F9             ;==============================================================================
00901  08F9             
00902  08F9             DEFM       LIBMATH_SUB8BIT_AVA
00903  08F9                        ; /1 = 1ST NUMBER (ADDRESS)
00904  08F9                        ; /2 = 2ND NUMBER (VALUE)
00905  08F9                        ; /3 = SUM (ADDRESS)
00906  08F9                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00907  08F9                        LDA /1  ; GET FIRST NUMBER
00908  08F9                        SBC #/2 ; SUBTRACT SECOND NUMBER
00909  08F9                        STA /3  ; STORE IN SUM
00910  08F9                        ENDM
00911  08F9             
00912  08F9             ;==============================================================================
00913  08F9             
00914  08F9             DEFM       LIBMATH_SUB16BIT_AAVAAA
00915  08F9                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00916  08F9                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00917  08F9                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00918  08F9                        ; /4 = 2ND NUMBER LOW BYTE (ADDRESS)
00919  08F9                        ; /5 = SUM HIGH BYTE (ADDRESS)
00920  08F9                        ; /6 = SUM LOW BYTE (ADDRESS)
00921  08F9                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00922  08F9                        LDA /2  ; GET LSB OF FIRST NUMBER
00923  08F9                        SBC /4 ; SUBTRACT LSB OF SECOND NUMBER
00924  08F9                        STA /6  ; STORE IN LSB OF SUM
00925  08F9                        LDA /1  ; GET MSB OF FIRST NUMBER
00926  08F9                        SBC #/3 ; SUBTRACT BORROW AND MSB OF NUM2
00927  08F9                        STA /5  ; STORE SUM IN MSB OF SUM
00928  08F9                        ENDM
00929  08F9             
00930  08F9             ;==============================================================================
00931  08F9             
00932  08F9             DEFM       LIBMATH_SUB16BIT_AAVVAA
00933  08F9                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00934  08F9                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00935  08F9                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00936  08F9                        ; /4 = 2ND NUMBER LOW BYTE (VALUE)
00937  08F9                        ; /5 = SUM HIGH BYTE (ADDRESS)
00938  08F9                        ; /6 = SUM LOW BYTE (ADDRESS)
00939  08F9                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00940  08F9                        LDA /2  ; GET LSB OF FIRST NUMBER
00941  08F9                        SBC #/4 ; SUBTRACT LSB OF SECOND NUMBER
00942  08F9                        STA /6  ; STORE IN LSB OF SUM
00943  08F9                        LDA /1  ; GET MSB OF FIRST NUMBER
00944  08F9                        SBC #/3 ; SUBTRACT BORROW AND MSB OF NUM2
00945  08F9                        STA /5  ; STORE SUM IN MSB OF SUM
00946  08F9                        ENDM
00947  08F9             
00948  08F9             ;==============================================================================
00949  08F9             
00950  08F9             DEFM       LIBMATH_ADD16BIT_AAA
00951  08F9                        ; /1 = 1ST NUMBER WORD (ADDRESS)
00952  08F9                        ; /2 = 2ND NUMBER WORD (ADDRESS)
00953  08F9                        ; /3 = 3RD NUMBER WORD (ADDRESS)
00954  08F9             
00955  08F9                        CLC       ; CLEAR CARRY BEFORE FIRST ADD
00956  08F9                        LDA /1    ; GET LSB OF FIRST NUMBER
00957  08F9                        ADC /2    ; ADD LSB OF SECOND NUMBER
00958  08F9                        STA /3    ; STORE IN LSB OF SUM
00959  08F9                        LDA /1+1  ; GET MSB OF FIRST NUMBER
00960  08F9                        ADC /2+1  ; ADD CARRY AND MSB OF NUM2
00961  08F9                        STA /3+1  ; STORE SUM IN MSB OF SUM
00962  08F9                        ENDM
00963  08F9             
00964  08F9             ;==============================================================================
00965  08F9             
00966  08F9             DEFM       LIBMATH_SUB16BIT_AAA
00967  08F9                        ; /1 = 1ST NUMBER WORD (ADDRESS)
00968  08F9                        ; /2 = 2ND NUMBER WORD (ADDRESS)
00969  08F9                        ; /3 = 3RD NUMBER WORD (ADDRESS)
00970  08F9                        SEC       ; SEC IS THE SAME AS CLEAR BORROW
00971  08F9                        LDA /1    ; GET LSB OF FIRST NUMBER
00972  08F9                        SBC /2    ; SUBTRACT LSB OF SECOND NUMBER
00973  08F9                        STA /3    ; STORE IN LSB OF SUM
00974  08F9                        LDA /1+1  ; GET MSB OF FIRST NUMBER
00975  08F9                        SBC /2+1  ; SUBTRACT BORROW AND MSB OF NUM2
00976  08F9                        STA /3+1  ; STORE SUM IN MSB OF SUM
00977  08F9                        ENDM
00978  08F9             
00979  08F9             
00980  08F9             ;===============================================================================
00981  08F9             ; CONSTANTS
00982  08F9             
00983  08F9                        ; USE JOYSTICK 2, CHANGE TO CIAPRB FOR JOYSTICK 1
00984  08F9             JOYSTICKREGISTER = CIAPRA
00985  08F9             
00986  08F9             GAMEPORTUPMASK = %00000001
00987  08F9             GAMEPORTDOWNMASK = %00000010
00988  08F9             GAMEPORTLEFTMASK = %00000100
00989  08F9             GAMEPORTRIGHTMASK = %00001000
00990  08F9             GAMEPORTFIREMASK = %00010000
00991  08F9             GAMEPORTNOINPUTMASK = %00011111
00992  08F9             FIREDELAYMAX = 30
00993  08F9             
00994  08F9             ;===============================================================================
00995  08F9             ; VARIABLES
00996  08F9             
00997  08F9  00         GAMEPORTLASTFRAME BYTE 0
00998  08FA  00         GAMEPORTTHISFRAME BYTE 0
00999  08FB  00         GAMEPORTDIFF BYTE 0
01000  08FC  00         FIREDELAY  BYTE 0
01001  08FD  01         FIREBLIP   BYTE 1 ; REVERSED LOGIC TO MATCH OTHER INPUT
01002  08FE             
01003  08FE             ;===============================================================================
01004  08FE             ; MACROS/SUBROUTINES
01005  08FE             
01006  08FE             DEFM       LIBINPUT_GETHELD ; (BUTTONMASK)
01007  08FE             
01008  08FE                        LDA GAMEPORTTHISFRAME
01009  08FE                        AND #/1
01010  08FE                        ENDM ; TEST WITH BNE ON RETURN
01011  08FE             
01012  08FE             ;===============================================================================
01013  08FE             
01014  08FE             DEFM       LIBINPUT_GETFIREPRESSED
01015  08FE                        
01016  08FE                        LDA #1
01017  08FE                        STA FIREBLIP ; CLEAR FIRE FLAG
01018  08FE             
01019  08FE                        ; IS FIRE HELD?
01020  08FE                        LDA GAMEPORTTHISFRAME
01021  08FE                        AND #GAMEPORTFIREMASK
01022  08FE                        BNE @NOTHELD
01023  08FE             
01024  08FE             @HELD
01025  08FE                        ; IS THIS 1ST FRAME?
01026  08FE                        LDA GAMEPORTDIFF
01027  08FE                        AND #GAMEPORTFIREMASK
01028  08FE                        
01029  08FE                        BEQ @NOTFIRST
01030  08FE                        LDA #0
01031  08FE                        STA FIREBLIP ; FIRE
01032  08FE             
01033  08FE                        ; RESET DELAY
01034  08FE                        LDA #FIREDELAYMAX
01035  08FE                        STA FIREDELAY
01036  08FE             @NOTFIRST
01037  08FE             
01038  08FE                        ; IS THE DELAY ZERO?
01039  08FE                        LDA FIREDELAY
01040  08FE                        BNE @NOTHELD
01041  08FE                        LDA #0
01042  08FE                        STA FIREBLIP ; FIRE
01043  08FE                        ; RESET DELAY
01044  08FE                        LDA #FIREDELAYMAX
01045  08FE                        STA FIREDELAY
01046  08FE                        
01047  08FE             @NOTHELD   
01048  08FE                        LDA FIREBLIP
01049  08FE                        ENDM ; TEST WITH BNE ON RETURN
01050  08FE             
01051  08FE             ;===============================================================================
01052  08FE             
01053  08FE             LIBINPUTUPDATE 
01054  08FE             
01055  08FE  AD 00 DC              LDA JOYSTICKREGISTER
01056  0901  8D FA 08              STA GAMEPORTTHISFRAME
01057  0904             
01058  0904  4D F9 08              EOR GAMEPORTLASTFRAME
01059  0907  8D FB 08              STA GAMEPORTDIFF
01060  090A             
01061  090A                        
01062  090A  AD FC 08              LDA FIREDELAY
01063  090D  F0 03                 BEQ LIUDELAYZERO
01064  090F  CE FC 08              DEC FIREDELAY
01065  0912             LIUDELAYZERO 
01066  0912             
01067  0912  AD FA 08              LDA GAMEPORTTHISFRAME
01068  0915  8D F9 08              STA GAMEPORTLASTFRAME
01069  0918             
01070  0918  60                    RTS
01071  0919             ;===============================================================================
01072  0919             ; $00-$FF  PAGE ZERO (256 BYTES)
01073  0919                        
01074  0919                        ; $00-$01   RESERVED FOR IO
01075  0919             ZEROPAGETEMP = $02
01076  0919                        ; $03-$8F   RESERVED FOR BASIC
01077  0919                        ; USING $73-$8A CHRGET AS BASIC NOT USED FOR OUR GAME
01078  0919             ZEROPAGEPARAM1 = $73
01079  0919             ZEROPAGEPARAM2 = $74
01080  0919             ZEROPAGEPARAM3 = $75
01081  0919             ZEROPAGEPARAM4 = $76
01082  0919             ZEROPAGEPARAM5 = $77
01083  0919             ZEROPAGEPARAM6 = $78
01084  0919             ZEROPAGEPARAM7 = $79
01085  0919             ZEROPAGEPARAM8 = $7A
01086  0919             ZEROPAGEPARAM9 = $7B
01087  0919                        ; $90-$FA   RESERVED FOR KERNAL
01088  0919             ZEROPAGELOW = $FB
01089  0919             ZEROPAGEHIGH = $FC
01090  0919             ZEROPAGELOW2 = $FD
01091  0919             ZEROPAGEHIGH2 = $FE
01092  0919                        ; $FF       RESERVED FOR KERNAL
01093  0919             
01094  0919             ;===============================================================================
01095  0919             ; $0200-$9FFF  RAM (40K)
01096  0919             
01097  0919             SCREENRAM  = $0400
01098  0919             SPRITE0    = $07F8
01099  0919             
01100  0919             ; $0801
01101  0919             ; GAME CODE IS PLACED HERE BY USING THE *=$0801 DIRECTIVE
01102  0919             ; IN GAMEMAIN.ASM
01103  0919             
01104  0919             
01105  0919             ; 192 DECIMAL * 64(SPRITE SIZE) = 10880(HEX $2A80)
01106  0919             SPRITERAM  = 170
01107  0919             
01108  0919             ;===============================================================================
01109  0919             ; $D000-$DFFF  IO (4K)
01110  0919             
01111  0919             ; THESE ARE SOME OF THE C64 REGISTERS THAT ARE MAPPED INTO
01112  0919             ; IO MEMORY SPACE
01113  0919             ; NAMES TAKEN FROM 'MAPPING THE COMMODORE 64' BOOK
01114  0919             
01115  0919             SP0X       = $D000
01116  0919             SP0Y       = $D001
01117  0919             MSIGX      = $D010
01118  0919             RASTER     = $D012
01119  0919             SPENA      = $D015
01120  0919             SCROLX     = $D016
01121  0919             VMCSB      = $D018
01122  0919             VICIRQ     = $D019
01123  0919             SPBGPR     = $D01B
01124  0919             SPMC       = $D01C
01125  0919             SPSPCL     = $D01E
01126  0919             EXTCOL     = $D020
01127  0919             BGCOL0     = $D021
01128  0919             BGCOL1     = $D022
01129  0919             BGCOL2     = $D023
01130  0919             BGCOL3     = $D024
01131  0919             SPMC0      = $D025
01132  0919             SPMC1      = $D026
01133  0919             SP0COL     = $D027
01134  0919             FRELO1     = $D400 ;(54272)
01135  0919             FREHI1     = $D401 ;(54273)
01136  0919             PWLO1      = $D402 ;(54274)
01137  0919             PWHI1      = $D403 ;(54275)
01138  0919             VCREG1     = $D404 ;(54276)
01139  0919             ATDCY1     = $D405 ;(54277)
01140  0919             SUREL1     = $D406 ;(54278)
01141  0919             FRELO2     = $D407 ;(54279)
01142  0919             FREHI2     = $D408 ;(54280)
01143  0919             PWLO2      = $D409 ;(54281)
01144  0919             PWHI2      = $D40A ;(54282)
01145  0919             VCREG2     = $D40B ;(54283)
01146  0919             ATDCY2     = $D40C ;(54284)
01147  0919             SUREL2     = $D40D ;(54285)
01148  0919             FRELO3     = $D40E ;(54286)
01149  0919             FREHI3     = $D40F ;(54287)
01150  0919             PWLO3      = $D410 ;(54288)
01151  0919             PWHI3      = $D411 ;(54289)
01152  0919             VCREG3     = $D412 ;(54290)
01153  0919             ATDCY3     = $D413 ;(54291)
01154  0919             SUREL3     = $D414 ;(54292)
01155  0919             SIGVOL     = $D418 ;(54296)
01156  0919             COLORRAM   = $D800
01157  0919             CIAPRA     = $DC00
01158  0919             CIAPRB     = $DC01
01159  0919             
01160  0919             ; KERNEL JUMP VECTORS
01161  0919             KRLJMP_PCINT$ = $FF81
01162  0919             KRLJMP_IOINIT$ = $FF84
01163  0919             KRLJMP_RAMTAS$ = $FF87
01164  0919             KRLJMP_RESTOR$ = $FF8A
01165  0919             KRLJMP_VECTOR$ = $FF8D
01166  0919             KRLJMP_SETMSG$ = $FF90
01167  0919             KRLJMP_SECOND$ = $FF93
01168  0919             KRLJMP_TKSA$ = $FF96
01169  0919             KRLJMP_MEMTOP$ = $FF99
01170  0919             KRLJMP_MEMBOT$ = $FF9C
01171  0919             KRLJMP_SCNKEY$ = $FF9F
01172  0919             KRLJMP_SETTMO$ = $FFA2
01173  0919             KRLJMP_ACPTR$ = $FFA5
01174  0919             KRLJMP_CIOUT$ = $FFA8
01175  0919             KRLJMP_UNTALK$ = $FFAB
01176  0919             KRLJMP_UNLSN$ = $FFAE
01177  0919             KRLJMP_LISTEN$ = $FFB1
01178  0919             KRLJMP_TALK$ = $FFB4
01179  0919             KRLJMP_READST$ = $FFB7
01180  0919             KRLJMP_SETLFS$ = $FFBA
01181  0919             KRLJMP_SETNAM$ = $FFBD
01182  0919             KRLJMP_OPEN$ = $FFC0
01183  0919             KRLJMP_CLOSE$ = $FFC3
01184  0919             KRLJMP_CHKIN$ = $FFC6
01185  0919             KRLJMP_CHKOUT$ = $FFC9
01186  0919             KRLJMP_CLRCHN$ = $FFCC
01187  0919             KRLJMP_CHRIN$ = $FFCF
01188  0919             KRLJMP_CHROUT$ = $FFD2
01189  0919             KRLJMP_LOAD$ = $FFD5
01190  0919             KRLJMP_SAVE$ = $FFD8
01191  0919             KRLJMP_SETTIM$ = $FFDB
01192  0919             KRLJMP_RDTIM$ = $FFDE
01193  0919             KRLJMP_STOP$ = $FFE1
01194  0919             KRLJMP_GETIN$ = $FFE4
01195  0919             KRLJMP_CLALL$ = $FFE7
01196  0919             KRLJMP_UDTIM$ = $FFEA
01197  0919             KRLJMP_SCREEN$ = $FFED
01198  0919             KRLJMP_PLOT$ = $FFF0
01199  0919             KRLJMP_BASE$ = $FFF3
01200  0919             
01201  0919             SPLUNALANDER = 0
01202  0919             SPTHRUSTDOWN = 2
01203  0919             SPTHRUSTLEFT = 4
01204  0919             SPTHRUSTRIGHT = 3
01205  0919             SPNOTHRUST = 5
01206  0919             ;===============================================================================
01207  0919             ; CONSTANTS
01208  0919             
01209  0919             BLACK      = 0
01210  0919             WHITE      = 1
01211  0919             RED        = 2
01212  0919             CYAN       = 3
01213  0919             PURPLE     = 4
01214  0919             GREEN      = 5
01215  0919             BLUE       = 6
01216  0919             YELLOW     = 7
01217  0919             ORANGE     = 8
01218  0919             BROWN      = 9
01219  0919             LIGHTRED   = 10
01220  0919             DARKGRAY   = 11
01221  0919             MEDIUMGRAY = 12
01222  0919             LIGHTGREEN = 13
01223  0919             LIGHTBLUE  = 14
01224  0919             LIGHTGRAY  = 15
01225  0919             SPACECHARACTER = 32
01226  0919             
01227  0919             FALSE      = 0
01228  0919             TRUE       = 1
01229  0919             
01230  0919             ;===============================================================================
01231  0919             ; VARIABLES
01232  0919             
01233  0919             OPERATOR   CALC
01234  0919             
01235  0919             SCREENRAMROWSTARTLOW ;  SCREENRAM + 40*0, 40*1, 40*2 ... 40*24
01236  0919  00 28 50              BYTE <SCREENRAM,     <SCREENRAM+40,  <SCREENRAM+80
01237  091C  78 A0 C8              BYTE <SCREENRAM+120, <SCREENRAM+160, <SCREENRAM+200
01238  091F  F0 18 40              BYTE <SCREENRAM+240, <SCREENRAM+280, <SCREENRAM+320
01239  0922  68 90 B8              BYTE <SCREENRAM+360, <SCREENRAM+400, <SCREENRAM+440
01240  0925  E0 08 30              BYTE <SCREENRAM+480, <SCREENRAM+520, <SCREENRAM+560
01241  0928  58 80 A8              BYTE <SCREENRAM+600, <SCREENRAM+640, <SCREENRAM+680
01242  092B  D0 F8 20              BYTE <SCREENRAM+720, <SCREENRAM+760, <SCREENRAM+800
01243  092E  48 70 98              BYTE <SCREENRAM+840, <SCREENRAM+880, <SCREENRAM+920
01244  0931  C0                    BYTE <SCREENRAM+960
01245  0932             
01246  0932             SCREENRAMROWSTARTHIGH ;  SCREENRAM + 40*0, 40*1, 40*2 ... 40*24
01247  0932  04 04 04              BYTE >SCREENRAM,     >SCREENRAM+40,  >SCREENRAM+80
01248  0935  04 04 04              BYTE >SCREENRAM+120, >SCREENRAM+160, >SCREENRAM+200
01249  0938  04 05 05              BYTE >SCREENRAM+240, >SCREENRAM+280, >SCREENRAM+320
01250  093B  05 05 05              BYTE >SCREENRAM+360, >SCREENRAM+400, >SCREENRAM+440
01251  093E  05 06 06              BYTE >SCREENRAM+480, >SCREENRAM+520, >SCREENRAM+560
01252  0941  06 06 06              BYTE >SCREENRAM+600, >SCREENRAM+640, >SCREENRAM+680
01253  0944  06 06 07              BYTE >SCREENRAM+720, >SCREENRAM+760, >SCREENRAM+800
01254  0947  07 07 07              BYTE >SCREENRAM+840, >SCREENRAM+880, >SCREENRAM+920
01255  094A  07                    BYTE >SCREENRAM+960
01256  094B             
01257  094B             COLORRAMROWSTARTLOW ;  COLORRAM + 40*0, 40*1, 40*2 ... 40*24
01258  094B  00 28 50              BYTE <COLORRAM,     <COLORRAM+40,  <COLORRAM+80
01259  094E  78 A0 C8              BYTE <COLORRAM+120, <COLORRAM+160, <COLORRAM+200
01260  0951  F0 18 40              BYTE <COLORRAM+240, <COLORRAM+280, <COLORRAM+320
01261  0954  68 90 B8              BYTE <COLORRAM+360, <COLORRAM+400, <COLORRAM+440
01262  0957  E0 08 30              BYTE <COLORRAM+480, <COLORRAM+520, <COLORRAM+560
01263  095A  58 80 A8              BYTE <COLORRAM+600, <COLORRAM+640, <COLORRAM+680
01264  095D  D0 F8 20              BYTE <COLORRAM+720, <COLORRAM+760, <COLORRAM+800
01265  0960  48 70 98              BYTE <COLORRAM+840, <COLORRAM+880, <COLORRAM+920
01266  0963  C0                    BYTE <COLORRAM+960
01267  0964             
01268  0964             COLORRAMROWSTARTHIGH ;  COLORRAM + 40*0, 40*1, 40*2 ... 40*24
01269  0964  D8 D8 D8              BYTE >COLORRAM,     >COLORRAM+40,  >COLORRAM+80
01270  0967  D8 D8 D8              BYTE >COLORRAM+120, >COLORRAM+160, >COLORRAM+200
01271  096A  D8 D9 D9              BYTE >COLORRAM+240, >COLORRAM+280, >COLORRAM+320
01272  096D  D9 D9 D9              BYTE >COLORRAM+360, >COLORRAM+400, >COLORRAM+440
01273  0970  D9 DA DA              BYTE >COLORRAM+480, >COLORRAM+520, >COLORRAM+560
01274  0973  DA DA DA              BYTE >COLORRAM+600, >COLORRAM+640, >COLORRAM+680
01275  0976  DA DA DB              BYTE >COLORRAM+720, >COLORRAM+760, >COLORRAM+800
01276  0979  DB DB DB              BYTE >COLORRAM+840, >COLORRAM+880, >COLORRAM+920
01277  097C  DB                    BYTE >COLORRAM+960
01278  097D             
01279  097D             OPERATOR   HILO
01280  097D             
01281  097D  00         SCREENCOLUMN BYTE 0
01282  097E  00         SCREENSCROLLXVALUE BYTE 0
01283  097F             
01284  097F             ;===============================================================================
01285  097F             ; MACROS/SUBROUTINES
01286  097F             
01287  097F             DEFM       LIBSCREEN_DEBUG8BIT_VVA
01288  097F                        ; /1 = X POSITION ABSOLUTE
01289  097F                        ; /2 = Y POSITION ABSOLUTE
01290  097F                        ; /3 = 1ST NUMBER LOW BYTE POINTER
01291  097F                        
01292  097F                        LDA #WHITE
01293  097F                        STA $0286       ; SET TEXT COLOR
01294  097F                        LDA #$20        ; SPACE
01295  097F                        JSR $FFD2       ; PRINT 4 SPACES
01296  097F                        JSR $FFD2
01297  097F                        JSR $FFD2
01298  097F                        JSR $FFD2
01299  097F                        ;JSR $E566      ; RESET CURSOR
01300  097F                        LDX #/2         ; SELECT ROW
01301  097F                        LDY #/1         ; SELECT COLUMN
01302  097F                        JSR $E50C       ; SET CURSOR
01303  097F             
01304  097F                        LDA #0
01305  097F                        LDX /3
01306  097F                        JSR $BDCD       ; PRINT NUMBER
01307  097F                        ENDM
01308  097F             
01309  097F             ;===============================================================================
01310  097F             
01311  097F             DEFM       LIBSCREEN_DEBUG16BIT_VVAA
01312  097F                        ; /1 = X POSITION ABSOLUTE
01313  097F                        ; /2 = Y POSITION ABSOLUTE
01314  097F                        ; /3 = 1ST NUMBER HIGH BYTE POINTER
01315  097F                        ; /4 = 1ST NUMBER LOW BYTE POINTER
01316  097F                        
01317  097F                        LDA #WHITE
01318  097F                        STA $0286       ; SET TEXT COLOR
01319  097F                        LDA #$20        ; SPACE
01320  097F                        JSR $FFD2       ; PRINT 4 SPACES
01321  097F                        JSR $FFD2
01322  097F                        JSR $FFD2
01323  097F                        JSR $FFD2
01324  097F                        ;JSR $E566      ; RESET CURSOR
01325  097F                        LDX #/2         ; SELECT ROW
01326  097F                        LDY #/1         ; SELECT COLUMN
01327  097F                        JSR $E50C       ; SET CURSOR
01328  097F             
01329  097F                        LDA /3
01330  097F                        LDX /4
01331  097F                        JSR $BDCD       ; PRINT NUMBER
01332  097F                        ENDM
01333  097F             
01334  097F             ;==============================================================================
01335  097F             
01336  097F             DEFM       LIBSCREEN_DRAWTEXT_AAAV ; /1 = X POSITION 0-39 (ADDRESS)
01337  097F                        ; /2 = Y POSITION 0-24 (ADDRESS)
01338  097F                        ; /3 = 0 TERMINATED STRING (ADDRESS)
01339  097F                        ; /4 = TEXT COLOR (VALUE)
01340  097F             
01341  097F                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
01342  097F                        
01343  097F                        LDA SCREENRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
01344  097F                        STA ZEROPAGELOW
01345  097F             
01346  097F                        LDA SCREENRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
01347  097F                        STA ZEROPAGEHIGH
01348  097F             
01349  097F                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
01350  097F             
01351  097F                        LDX #0
01352  097F             @LOOP      LDA /3,X
01353  097F                        CMP #0
01354  097F                        BEQ @DONE
01355  097F                        STA (ZEROPAGELOW),Y
01356  097F                        INX
01357  097F                        INY
01358  097F                        JMP @LOOP
01359  097F             @DONE
01360  097F             
01361  097F             
01362  097F                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
01363  097F                        
01364  097F                        LDA COLORRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
01365  097F                        STA ZEROPAGELOW
01366  097F             
01367  097F                        LDA COLORRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
01368  097F                        STA ZEROPAGEHIGH
01369  097F             
01370  097F                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
01371  097F             
01372  097F                        LDX #0
01373  097F             @LOOP2     LDA /3,X
01374  097F                        CMP #0
01375  097F                        BEQ @DONE2
01376  097F                        LDA #/4
01377  097F                        STA (ZEROPAGELOW),Y
01378  097F                        INX
01379  097F                        INY
01380  097F                        JMP @LOOP2
01381  097F             @DONE2
01382  097F             
01383  097F                        ENDM
01384  097F             
01385  097F             ;===============================================================================
01386  097F             
01387  097F             DEFM       LIBSCREEN_DRAWDECIMAL_AAAV ; /1 = X POSITION 0-39 (ADDRESS)
01388  097F                        ; /2 = Y POSITION 0-24 (ADDRESS)
01389  097F                        ; /3 = DECIMAL NUMBER 2 NYBBLES (ADDRESS)
01390  097F                        ; /4 = TEXT COLOR (VALUE)
01391  097F             
01392  097F                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
01393  097F                        
01394  097F                        LDA SCREENRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
01395  097F                        STA ZEROPAGELOW
01396  097F             
01397  097F                        LDA SCREENRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
01398  097F                        STA ZEROPAGEHIGH
01399  097F             
01400  097F                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
01401  097F             
01402  097F                        ; GET HIGH NYBBLE
01403  097F                        LDA /3
01404  097F                        AND #$F0
01405  097F                        
01406  097F                        ; CONVERT TO ASCII
01407  097F                        LSR
01408  097F                        LSR
01409  097F                        LSR
01410  097F                        LSR
01411  097F                        ORA #$30
01412  097F             
01413  097F                        STA (ZEROPAGELOW),Y
01414  097F             
01415  097F                        ; MOVE ALONG TO NEXT SCREEN POSITION
01416  097F                        INY
01417  097F             
01418  097F                        ; GET LOW NYBBLE
01419  097F                        LDA /3
01420  097F                        AND #$0F
01421  097F             
01422  097F                        ; CONVERT TO ASCII
01423  097F                        ORA #$30
01424  097F             
01425  097F                        STA (ZEROPAGELOW),Y
01426  097F                        
01427  097F             
01428  097F                        ; NOW SET THE COLORS
01429  097F                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
01430  097F                        
01431  097F                        LDA COLORRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
01432  097F                        STA ZEROPAGELOW
01433  097F             
01434  097F                        LDA COLORRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
01435  097F                        STA ZEROPAGEHIGH
01436  097F             
01437  097F                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
01438  097F             
01439  097F                        LDA #/4
01440  097F                        STA (ZEROPAGELOW),Y
01441  097F             
01442  097F                        ; MOVE ALONG TO NEXT SCREEN POSITION
01443  097F                        INY
01444  097F                        
01445  097F                        STA (ZEROPAGELOW),Y
01446  097F             
01447  097F                        ENDM
01448  097F             
01449  097F             ;==============================================================================
01450  097F             
01451  097F             DEFM       LIBSCREEN_GETCHAR  ; /1 = RETURN CHARACTER CODE (ADDRESS)
01452  097F                        LDA (ZEROPAGELOW),Y
01453  097F                        STA /1
01454  097F                        ENDM
01455  097F             
01456  097F             ;===============================================================================
01457  097F             
01458  097F             DEFM       LIBSCREEN_PIXELTOCHAR_AAVAVAAAA
01459  097F                        ; /1 = XHIGHPIXELS      (ADDRESS)
01460  097F                        ; /2 = XLOWPIXELS       (ADDRESS)
01461  097F                        ; /3 = XADJUST          (VALUE)
01462  097F                        ; /4 = YPIXELS          (ADDRESS)
01463  097F                        ; /5 = YADJUST          (VALUE)
01464  097F                        ; /6 = XCHAR            (ADDRESS)
01465  097F                        ; /7 = XOFFSET          (ADDRESS)
01466  097F                        ; /8 = YCHAR            (ADDRESS)
01467  097F                        ; /9 = YOFFSET          (ADDRESS)
01468  097F                        
01469  097F             
01470  097F                        LDA /1
01471  097F                        STA ZEROPAGEPARAM1
01472  097F                        LDA /2
01473  097F                        STA ZEROPAGEPARAM2
01474  097F                        LDA #/3
01475  097F                        STA ZEROPAGEPARAM3
01476  097F                        LDA /4
01477  097F                        STA ZEROPAGEPARAM4
01478  097F                        LDA #/5
01479  097F                        STA ZEROPAGEPARAM5
01480  097F                        
01481  097F                        JSR LIBSCREEN_PIXELTOCHAR
01482  097F             
01483  097F                        LDA ZEROPAGEPARAM6
01484  097F                        STA /6
01485  097F                        LDA ZEROPAGEPARAM7
01486  097F                        STA /7
01487  097F                        LDA ZEROPAGEPARAM8
01488  097F                        STA /8
01489  097F                        LDA ZEROPAGEPARAM9
01490  097F                        STA /9
01491  097F             
01492  097F                        ENDM
01493  097F             
01494  097F             LIBSCREEN_PIXELTOCHAR 
01495  097F             
01496  097F                        ; SUBTRACT XADJUST PIXELS FROM XPIXELS AS LEFT OF A SPRITE IS FIRST VISIBLE AT X = 24
01497  097F             
01498  097F             
01499  097F  38                    SEC
01500  0980  A5 74                 LDA ZEROPAGEPARAM2
01501  0982  E5 75                 SBC ZEROPAGEPARAM3
01502  0984  85 79                 STA ZEROPAGEPARAM7
01503  0986  A5 73                 LDA ZEROPAGEPARAM1
01504  0988  E9 00                 SBC #0
01505  098A  85 78                 STA ZEROPAGEPARAM6
01506  098C             
01507  098C             
01508  098C             
01509  098C             
01510  098C             
01511  098C             
01512  098C             
01513  098C  A5 78                 LDA ZEROPAGEPARAM6
01514  098E  85 02                 STA ZEROPAGETEMP
01515  0990             
01516  0990                        ; DIVIDE BY 8 TO GET CHARACTER X
01517  0990  A5 79                 LDA ZEROPAGEPARAM7
01518  0992  4A                    LSR A ; DIVIDE BY 2
01519  0993  4A                    LSR A ; AND AGAIN = /4
01520  0994  4A                    LSR A ; AND AGAIN = /8
01521  0995  85 78                 STA ZEROPAGEPARAM6
01522  0997             
01523  0997                        ; AND 7 TO GET PIXEL OFFSET X
01524  0997  A5 79                 LDA ZEROPAGEPARAM7
01525  0999  29 07                 AND #7
01526  099B  85 79                 STA ZEROPAGEPARAM7
01527  099D             
01528  099D                        ; ADJUST FOR XHIGH
01529  099D  A5 02                 LDA ZEROPAGETEMP
01530  099F  F0 07                 BEQ @NOTHIGH
01531  09A1             
01532  09A1             
01533  09A1  18                    CLC
01534  09A2  A5 78                 LDA ZEROPAGEPARAM6
01535  09A4  69 20                 ADC #32
01536  09A6  85 78                 STA ZEROPAGEPARAM6
01537  09A8             
01538  09A8             
01539  09A8             
01540  09A8             
01541  09A8             @NOTHIGH
01542  09A8                        ; SUBTRACT YADJUST PIXELS FROM YPIXELS AS TOP OF A SPRITE IS FIRST VISIBLE AT Y = 50
01543  09A8             
01544  09A8             
01545  09A8  38                    SEC
01546  09A9  A5 76                 LDA ZEROPAGEPARAM4
01547  09AB  E5 77                 SBC ZEROPAGEPARAM5
01548  09AD  85 7B                 STA ZEROPAGEPARAM9
01549  09AF             
01550  09AF             
01551  09AF             
01552  09AF             
01553  09AF             
01554  09AF                        ; DIVIDE BY 8 TO GET CHARACTER Y
01555  09AF  A5 7B                 LDA ZEROPAGEPARAM9
01556  09B1  4A                    LSR A ; DIVIDE BY 2
01557  09B2  4A                    LSR A ; AND AGAIN = /4
01558  09B3  4A                    LSR A ; AND AGAIN = /8
01559  09B4  85 7A                 STA ZEROPAGEPARAM8
01560  09B6             
01561  09B6                        ; AND 7 TO GET PIXEL OFFSET Y
01562  09B6  A5 7B                 LDA ZEROPAGEPARAM9
01563  09B8  29 07                 AND #7
01564  09BA  85 7B                 STA ZEROPAGEPARAM9
01565  09BC             
01566  09BC  60                    RTS
01567  09BD             
01568  09BD             ;==============================================================================
01569  09BD             
01570  09BD             DEFM       LIBSCREEN_SCROLLXLEFT_A          ; /1 = UPDATE SUBROUTINE (ADDRESS)
01571  09BD             
01572  09BD                        DEC SCREENSCROLLXVALUE
01573  09BD                        LDA SCREENSCROLLXVALUE
01574  09BD                        AND #%00000111
01575  09BD                        STA SCREENSCROLLXVALUE
01576  09BD             
01577  09BD                        LDA SCROLX
01578  09BD                        AND #%11111000
01579  09BD                        ORA SCREENSCROLLXVALUE
01580  09BD                        STA SCROLX
01581  09BD             
01582  09BD                        LDA SCREENSCROLLXVALUE
01583  09BD                        CMP #7
01584  09BD                        BNE @FINISHED
01585  09BD             
01586  09BD                        ; MOVE TO NEXT COLUMN
01587  09BD                        INC SCREENCOLUMN
01588  09BD                        JSR /1 ; CALL THE PASSED IN FUNCTION TO UPDATE THE SCREEN ROWS
01589  09BD             @FINISHED
01590  09BD             
01591  09BD                        ENDM
01592  09BD             
01593  09BD             ;==============================================================================
01594  09BD             
01595  09BD             DEFM       LIBSCREEN_SCROLLXRIGHT_A         ; /1 = UPDATE SUBROUTINE (ADDRESS)
01596  09BD             
01597  09BD                        INC SCREENSCROLLXVALUE
01598  09BD                        LDA SCREENSCROLLXVALUE
01599  09BD                        AND #%00000111
01600  09BD                        STA SCREENSCROLLXVALUE
01601  09BD             
01602  09BD                        LDA SCROLX
01603  09BD                        AND #%11111000
01604  09BD                        ORA SCREENSCROLLXVALUE
01605  09BD                        STA SCROLX
01606  09BD             
01607  09BD                        LDA SCREENSCROLLXVALUE
01608  09BD                        CMP #0
01609  09BD                        BNE @FINISHED
01610  09BD             
01611  09BD                        ; MOVE TO PREVIOUS COLUMN
01612  09BD                        DEC SCREENCOLUMN
01613  09BD                        JSR /1 ; CALL THE PASSED IN FUNCTION TO UPDATE THE SCREEN ROWS
01614  09BD             @FINISHED
01615  09BD             
01616  09BD                        ENDM
01617  09BD             
01618  09BD             ;==============================================================================
01619  09BD             
01620  09BD             DEFM       LIBSCREEN_SCROLLXRESET_A         ; /1 = UPDATE SUBROUTINE (ADDRESS)
01621  09BD             
01622  09BD                        LDA #0
01623  09BD                        STA SCREENCOLUMN
01624  09BD                        STA SCREENSCROLLXVALUE
01625  09BD             
01626  09BD                        LDA SCROLX
01627  09BD                        AND #%11111000
01628  09BD                        ORA SCREENSCROLLXVALUE
01629  09BD                        STA SCROLX
01630  09BD             
01631  09BD                        JSR /1 ; CALL THE PASSED IN FUNCTION TO UPDATE THE SCREEN ROWS
01632  09BD             
01633  09BD                        ENDM
01634  09BD             
01635  09BD             ;==============================================================================
01636  09BD             
01637  09BD             DEFM       LIBSCREEN_SETSCROLLXVALUE_A     ; /1 = SCROLLX VALUE (ADDRESS)
01638  09BD             
01639  09BD                        LDA SCROLX
01640  09BD                        AND #%11111000
01641  09BD                        ORA /1
01642  09BD                        STA SCROLX
01643  09BD             
01644  09BD                        ENDM
01645  09BD             
01646  09BD             ;==============================================================================
01647  09BD             
01648  09BD             DEFM       LIBSCREEN_SETSCROLLXVALUE_V     ; /1 = SCROLLX VALUE (VALUE)
01649  09BD             
01650  09BD                        LDA SCROLX
01651  09BD                        AND #%11111000
01652  09BD                        ORA #/1
01653  09BD                        STA SCROLX
01654  09BD             
01655  09BD                        ENDM
01656  09BD             
01657  09BD             ;==============================================================================
01658  09BD             
01659  09BD             ; SETS 1000 BYTES OF MEMORY FROM START ADDRESS WITH A VALUE
01660  09BD             DEFM       LIBSCREEN_SET1000       ; /1 = START  (ADDRESS)
01661  09BD                        ; /2 = NUMBER (VALUE)
01662  09BD             
01663  09BD                        LDA #/2                 ; GET NUMBER TO SET
01664  09BD                        LDX #250                ; SET LOOP VALUE
01665  09BD             @LOOP      DEX                     ; STEP -1
01666  09BD                        STA /1,X                ; SET START + X
01667  09BD                        STA /1+250,X            ; SET START + 250 + X
01668  09BD                        STA /1+500,X            ; SET START + 500 + X
01669  09BD                        STA /1+750,X            ; SET START + 750 + X
01670  09BD                        BNE @LOOP               ; IF X<>0 LOOP
01671  09BD             
01672  09BD                        ENDM
01673  09BD             
01674  09BD             ;==============================================================================
01675  09BD             
01676  09BD             DEFM       LIBSCREEN_SET38COLUMNMODE
01677  09BD             
01678  09BD                        LDA SCROLX
01679  09BD                        AND #%11110111 ; CLEAR BIT 3
01680  09BD                        STA SCROLX
01681  09BD             
01682  09BD                        ENDM
01683  09BD             
01684  09BD             ;==============================================================================
01685  09BD             
01686  09BD             DEFM       LIBSCREEN_SET40COLUMNMODE
01687  09BD             
01688  09BD                        LDA SCROLX
01689  09BD                        ORA #%00001000 ; SET BIT 3
01690  09BD                        STA SCROLX
01691  09BD             
01692  09BD                        ENDM
01693  09BD             
01694  09BD             ;==============================================================================
01695  09BD             
01696  09BD             DEFM       LIBSCREEN_SETCHARMEMORY  ; /1 = CHARACTER MEMORY SLOT (VALUE)
01697  09BD                        ; POINT VIC (LOWER 4 BITS OF $D018)TO NEW CHARACTER DATA
01698  09BD                        LDA VMCSB
01699  09BD                        AND #%11110000 ; KEEP HIGHER 4 BITS
01700  09BD                        ; P208 M JONG BOOK
01701  09BD                        ORA #/1;$0E ; MAPS TO  $3800 MEMORY ADDRESS
01702  09BD                        STA VMCSB
01703  09BD                        ENDM
01704  09BD             
01705  09BD             ;==============================================================================
01706  09BD             
01707  09BD             DEFM       LIBSCREEN_SETCHAR_V  ; /1 = CHARACTER CODE (VALUE)
01708  09BD                        LDA #/1
01709  09BD                        STA (ZEROPAGELOW),Y
01710  09BD                        ENDM
01711  09BD             
01712  09BD             ;==============================================================================
01713  09BD             
01714  09BD             DEFM       LIBSCREEN_SETCHAR_A  ; /1 = CHARACTER CODE (ADDRESS)
01715  09BD                        LDA /1
01716  09BD                        STA (ZEROPAGELOW),Y
01717  09BD                        ENDM
01718  09BD             
01719  09BD             ;==============================================================================
01720  09BD             
01721  09BD             DEFM       LIBSCREEN_SETCHARPOSITION_AA    ; /1 = X POSITION 0-39 (ADDRESS)
01722  09BD                        ; /2 = Y POSITION 0-24 (ADDRESS)
01723  09BD                        
01724  09BD                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
01725  09BD                        
01726  09BD                        LDA SCREENRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
01727  09BD                        STA ZEROPAGELOW
01728  09BD             
01729  09BD                        LDA SCREENRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
01730  09BD                        STA ZEROPAGEHIGH
01731  09BD             
01732  09BD                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
01733  09BD             
01734  09BD                        ENDM
01735  09BD             
01736  09BD             ;==============================================================================
01737  09BD             
01738  09BD             DEFM       LIBSCREEN_SETCOLORPOSITION_AA   ; /1 = X POSITION 0-39 (ADDRESS)
01739  09BD                        ; /2 = Y POSITION 0-24 (ADDRESS)
01740  09BD                        
01741  09BD                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
01742  09BD                        
01743  09BD                        LDA COLORRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
01744  09BD                        STA ZEROPAGELOW
01745  09BD             
01746  09BD                        LDA COLORRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
01747  09BD                        STA ZEROPAGEHIGH
01748  09BD             
01749  09BD                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
01750  09BD             
01751  09BD                        ENDM
01752  09BD             
01753  09BD             ;===============================================================================
01754  09BD             
01755  09BD             ; SETS THE BORDER AND BACKGROUND COLORS
01756  09BD             DEFM       LIBSCREEN_SETCOLORS     ; /1 = BORDER COLOR       (VALUE)
01757  09BD                        ; /2 = BACKGROUND COLOR 0 (VALUE)
01758  09BD                        ; /3 = BACKGROUND COLOR 1 (VALUE)
01759  09BD                        ; /4 = BACKGROUND COLOR 2 (VALUE)
01760  09BD                        ; /5 = BACKGROUND COLOR 3 (VALUE)
01761  09BD                        
01762  09BD                        LDA #/1                 ; COLOR0 -> A
01763  09BD                        STA EXTCOL              ; A -> EXTCOL
01764  09BD                        LDA #/2                 ; COLOR1 -> A
01765  09BD                        STA BGCOL0              ; A -> BGCOL0
01766  09BD                        LDA #/3                 ; COLOR2 -> A
01767  09BD                        STA BGCOL1              ; A -> BGCOL1
01768  09BD                        LDA #/4                 ; COLOR3 -> A
01769  09BD                        STA BGCOL2              ; A -> BGCOL2
01770  09BD                        LDA #/5                 ; COLOR4 -> A
01771  09BD                        STA BGCOL3              ; A -> BGCOL3
01772  09BD             
01773  09BD                        ENDM
01774  09BD             
01775  09BD             ;==============================================================================
01776  09BD             
01777  09BD             DEFM       LIBSCREEN_SETMULTICOLORMODE
01778  09BD             
01779  09BD                        LDA SCROLX
01780  09BD                        ORA #%00010000 ; SET BIT 5
01781  09BD                        STA SCROLX
01782  09BD             
01783  09BD                        ENDM
01784  09BD             
01785  09BD             ;===============================================================================
01786  09BD             
01787  09BD             ; WAITS FOR A GIVEN SCANLINE
01788  09BD             DEFM       LIBSCREEN_WAIT_V        ; /1 = SCANLINE (VALUE)
01789  09BD             
01790  09BD             @LOOP      LDA #/1                 ; SCANLINE -> A
01791  09BD                        CMP RASTER              ; COMPARE A TO CURRENT RASTER LINE
01792  09BD                        BNE @LOOP               ; LOOP IF RASTER LINE NOT REACHED 255
01793  09BD             
01794  09BD                        ENDM
01795  09BD             
01796  09BD             
01797  09BD             ;===============================================================================
01798  09BD             ; CONSTANTS
01799  09BD             
01800  09BD             ;===============================================================================
01801  09BD             ; VARIABLES
01802  09BD             
01803  09BD             ;===============================================================================
01804  09BD             ; MACROS
01805  09BD             
01806  09BD             DEFM       LIBPRINT_PRINTSTRING_A  ; /1 = TEXT TERMINATED BY 0 (ADDRESS)
01807  09BD                        
01808  09BD                        LDY #0
01809  09BD             
01810  09BD             @GETNEXTCHARACTER 
01811  09BD                        LDA /1,Y
01812  09BD                        BEQ @END
01813  09BD                        JSR KRLJMP_CHROUT$
01814  09BD                        INY
01815  09BD                        BEQ @END
01816  09BD                        JMP @GETNEXTCHARACTER
01817  09BD             
01818  09BD             @END
01819  09BD                        ENDM
01820  09BD             
01821  09BD             
01822  09BD             GAMESTART
01823  09BD  20 F5 09              JSR SETUPLUNARSPRITE
01824  09C0  20 40 0B              JSR SETUPCUSTOMCHARACTERS
01825  09C3  20 03 0C              JSR SETUPLEVELONESCENE
01826  09C6             
01827  09C6  20 14 0C              JSR SETUPGAMEVARIABLES
01828  09C9             
01829  09C9             GAMELOOP
01830  09C9             
01831  09C9             
01832  09C9  A9 FF      @LOOP      LDA #255
01833  09CB  CD 12 D0              CMP RASTER
01834  09CE  D0 F9                 BNE @LOOP
01835  09D0             
01836  09D0             
01837  09D0  A9 01                 LDA #1
01838  09D2  8D 20 D0              STA EXTCOL
01839  09D5             
01840  09D5                        ;LIBSCREEN_DEBUG16BIT_VVAA 1,1,VERTICALVELOCITY, VERTICALVELOCITYFRAC
01841  09D5                        ;LIBSCREEN_DEBUG8BIT_VVA 8,1,LUNALANDERY
01842  09D5             
01843  09D5  AD 3A 08              LDA GAMELOOPFRAMETRACKER
01844  09D8  D0 06                 BNE GAMELOOPER
01845  09DA             
01846  09DA  20 35 0C              JSR READINPUTANDUPDATEVARIABLES
01847  09DD  20 CE 0C              JSR UPDATESPRITEPOSITION
01848  09E0             
01849  09E0                        ;JSR LIBSPRITESUPDATE
01850  09E0             
01851  09E0             GAMELOOPER 
01852  09E0  AD 3A 08              LDA GAMELOOPFRAMETRACKER
01853  09E3  18                    CLC
01854  09E4  69 01                 ADC #$01
01855  09E6  2D 3B 08              AND FRAMESKIPRATE
01856  09E9  8D 3A 08              STA GAMELOOPFRAMETRACKER
01857  09EC             
01858  09EC  A9 00                 LDA #0
01859  09EE  8D 20 D0              STA EXTCOL
01860  09F1             
01861  09F1  4C C9 09              JMP GAMELOOP
01862  09F4  60                    RTS
01863  09F5             
01864  09F5             
01865  09F5             
01866  09F5             SETUPLUNARSPRITE 
01867  09F5  A9 3C                 LDA #60
01868  09F7  8D 24 08              STA LUNALANDERXLO
01869  09FA  8D 27 08              STA LUNALANDERY
01870  09FD  A9 00                 LDA #0
01871  09FF  8D 25 08              STA LUNALANDERXHI
01872  0A02  8D 28 08              STA LUNALANDERSPNO
01873  0A05  8D 29 08              STA LUNALANDERCOLOUR
01874  0A08             
01875  0A08  A9 02                 LDA #RED
01876  0A0A  8D 2C 08              STA THRUSTCOLOUR
01877  0A0D  8D 2F 08              STA MANUOVERCOLOUR
01878  0A10             
01879  0A10                        ; POKE 53273, PEEK(53273) OR 2
01880  0A10  AD 19 D0              LDA VICIRQ
01881  0A13  09 02                 ORA #2
01882  0A15  8D 19 D0              STA VICIRQ
01883  0A18             
01884  0A18                        ; 20 POKE 2040,170 : REM SPRITE POINT * 64 = 170 * 64 = 10880
01885  0A18                        ; 25 POKE 2041,186
01886  0A18             
01887  0A18             
01888  0A18  AC 28 08              LDY LUNALANDERSPNO
01889  0A1B                        
01890  0A1B  18                    CLC
01891  0A1C  A9 00                 LDA #SPLUNALANDER
01892  0A1E  69 AA                 ADC #SPRITERAM
01893  0A20                        
01894  0A20  99 F8 07              STA SPRITE0,Y
01895  0A23             
01896  0A23             
01897  0A23             
01898  0A23  AC 2A 08              LDY THRUSTSPNO
01899  0A26                        
01900  0A26  18                    CLC
01901  0A27  A9 05                 LDA #SPNOTHRUST
01902  0A29  69 AA                 ADC #SPRITERAM
01903  0A2B                        
01904  0A2B  99 F8 07              STA SPRITE0,Y
01905  0A2E             
01906  0A2E             
01907  0A2E             
01908  0A2E  AC 2D 08              LDY MANUOVERSPNO
01909  0A31                        
01910  0A31  18                    CLC
01911  0A32  A9 05                 LDA #SPNOTHRUST
01912  0A34  69 AA                 ADC #SPRITERAM
01913  0A36                        
01914  0A36  99 F8 07              STA SPRITE0,Y
01915  0A39             
01916  0A39             
01917  0A39                        ;POKE 53269,3
01918  0A39             
01919  0A39             
01920  0A39  AC 28 08              LDY LUNALANDERSPNO
01921  0A3C  B9 7F 08              LDA SPRITENUMBERMASK,Y
01922  0A3F                        
01923  0A3F  A0 01                 LDY #TRUE
01924  0A41  F0 09                 BEQ @DISABLE
01925  0A43             @ENABLE
01926  0A43  0D 15 D0              ORA SPENA
01927  0A46  8D 15 D0              STA SPENA
01928  0A49  4C 54 0A              JMP @DONE
01929  0A4C             @DISABLE
01930  0A4C  49 FF                 EOR #$FF
01931  0A4E  2D 15 D0              AND SPENA
01932  0A51  8D 15 D0              STA SPENA
01933  0A54             @DONE
01934  0A54             
01935  0A54             
01936  0A54             
01937  0A54  AC 2A 08              LDY THRUSTSPNO
01938  0A57  B9 7F 08              LDA SPRITENUMBERMASK,Y
01939  0A5A                        
01940  0A5A  A0 01                 LDY #TRUE
01941  0A5C  F0 09                 BEQ @DISABLE
01942  0A5E             @ENABLE
01943  0A5E  0D 15 D0              ORA SPENA
01944  0A61  8D 15 D0              STA SPENA
01945  0A64  4C 6F 0A              JMP @DONE
01946  0A67             @DISABLE
01947  0A67  49 FF                 EOR #$FF
01948  0A69  2D 15 D0              AND SPENA
01949  0A6C  8D 15 D0              STA SPENA
01950  0A6F             @DONE
01951  0A6F             
01952  0A6F             
01953  0A6F             
01954  0A6F  AC 2D 08              LDY MANUOVERSPNO
01955  0A72  B9 7F 08              LDA SPRITENUMBERMASK,Y
01956  0A75                        
01957  0A75  A0 01                 LDY #TRUE
01958  0A77  F0 09                 BEQ @DISABLE
01959  0A79             @ENABLE
01960  0A79  0D 15 D0              ORA SPENA
01961  0A7C  8D 15 D0              STA SPENA
01962  0A7F  4C 8A 0A              JMP @DONE
01963  0A82             @DISABLE
01964  0A82  49 FF                 EOR #$FF
01965  0A84  2D 15 D0              AND SPENA
01966  0A87  8D 15 D0              STA SPENA
01967  0A8A             @DONE
01968  0A8A             
01969  0A8A             
01970  0A8A                        ; 30 Y = 60 : POKE 53249,Y : POKE 53251,Y
01971  0A8A                        ; 40 X = 60 : POKE 53248,X : POKE 53250,X
01972  0A8A             
01973  0A8A             
01974  0A8A             
01975  0A8A  AD 28 08              LDA LUNALANDERSPNO
01976  0A8D  0A                    ASL
01977  0A8E  A8                    TAY
01978  0A8F             
01979  0A8F  AD 24 08              LDA LUNALANDERXLO
01980  0A92  99 00 D0              STA SP0X,Y
01981  0A95  AD 27 08              LDA LUNALANDERY
01982  0A98  99 01 D0              STA SP0Y,Y
01983  0A9B                        
01984  0A9B  AC 28 08              LDY LUNALANDERSPNO
01985  0A9E  B9 7F 08              LDA SPRITENUMBERMASK,Y
01986  0AA1                        
01987  0AA1  49 FF                 EOR #$FF
01988  0AA3  2D 10 D0              AND MSIGX
01989  0AA6  8D 10 D0              STA MSIGX
01990  0AA9             
01991  0AA9  AC 25 08              LDY LUNALANDERXHI
01992  0AAC  F0 0C                 BEQ @END
01993  0AAE  AC 28 08              LDY LUNALANDERSPNO
01994  0AB1  B9 7F 08              LDA SPRITENUMBERMASK,Y
01995  0AB4                        
01996  0AB4  0D 10 D0              ORA MSIGX
01997  0AB7  8D 10 D0              STA MSIGX
01998  0ABA             @END
01999  0ABA             
02000  0ABA             
02001  0ABA             
02002  0ABA             
02003  0ABA             
02004  0ABA             
02005  0ABA  AD 2A 08              LDA THRUSTSPNO
02006  0ABD  0A                    ASL
02007  0ABE  A8                    TAY
02008  0ABF             
02009  0ABF  AD 24 08              LDA LUNALANDERXLO
02010  0AC2  99 00 D0              STA SP0X,Y
02011  0AC5  AD 27 08              LDA LUNALANDERY
02012  0AC8  99 01 D0              STA SP0Y,Y
02013  0ACB                        
02014  0ACB  AC 2A 08              LDY THRUSTSPNO
02015  0ACE  B9 7F 08              LDA SPRITENUMBERMASK,Y
02016  0AD1                        
02017  0AD1  49 FF                 EOR #$FF
02018  0AD3  2D 10 D0              AND MSIGX
02019  0AD6  8D 10 D0              STA MSIGX
02020  0AD9             
02021  0AD9  AC 25 08              LDY LUNALANDERXHI
02022  0ADC  F0 0C                 BEQ @END
02023  0ADE  AC 2A 08              LDY THRUSTSPNO
02024  0AE1  B9 7F 08              LDA SPRITENUMBERMASK,Y
02025  0AE4                        
02026  0AE4  0D 10 D0              ORA MSIGX
02027  0AE7  8D 10 D0              STA MSIGX
02028  0AEA             @END
02029  0AEA             
02030  0AEA             
02031  0AEA             
02032  0AEA             
02033  0AEA             
02034  0AEA             
02035  0AEA  AD 2D 08              LDA MANUOVERSPNO
02036  0AED  0A                    ASL
02037  0AEE  A8                    TAY
02038  0AEF             
02039  0AEF  AD 24 08              LDA LUNALANDERXLO
02040  0AF2  99 00 D0              STA SP0X,Y
02041  0AF5  AD 27 08              LDA LUNALANDERY
02042  0AF8  99 01 D0              STA SP0Y,Y
02043  0AFB                        
02044  0AFB  AC 2D 08              LDY MANUOVERSPNO
02045  0AFE  B9 7F 08              LDA SPRITENUMBERMASK,Y
02046  0B01                        
02047  0B01  49 FF                 EOR #$FF
02048  0B03  2D 10 D0              AND MSIGX
02049  0B06  8D 10 D0              STA MSIGX
02050  0B09             
02051  0B09  AC 25 08              LDY LUNALANDERXHI
02052  0B0C  F0 0C                 BEQ @END
02053  0B0E  AC 2D 08              LDY MANUOVERSPNO
02054  0B11  B9 7F 08              LDA SPRITENUMBERMASK,Y
02055  0B14                        
02056  0B14  0D 10 D0              ORA MSIGX
02057  0B17  8D 10 D0              STA MSIGX
02058  0B1A             @END
02059  0B1A             
02060  0B1A             
02061  0B1A             
02062  0B1A             
02063  0B1A                        ; POKE 53287,0
02064  0B1A             
02065  0B1A             
02066  0B1A  AC 28 08              LDY LUNALANDERSPNO
02067  0B1D  AD 29 08              LDA LUNALANDERCOLOUR
02068  0B20  99 27 D0              STA SP0COL,Y
02069  0B23             
02070  0B23             
02071  0B23                        ; POKE 53288,2
02072  0B23             
02073  0B23             
02074  0B23  AC 2A 08              LDY THRUSTSPNO
02075  0B26  AD 2C 08              LDA THRUSTCOLOUR
02076  0B29  99 27 D0              STA SP0COL,Y
02077  0B2C             
02078  0B2C             
02079  0B2C             
02080  0B2C  AC 2D 08              LDY MANUOVERSPNO
02081  0B2F  AD 2F 08              LDA MANUOVERCOLOUR
02082  0B32  99 27 D0              STA SP0COL,Y
02083  0B35             
02084  0B35             
02085  0B35             
02086  0B35  A9 07                 LDA #YELLOW
02087  0B37  8D 25 D0              STA SPMC0
02088  0B3A  A9 0F                 LDA #LIGHTGRAY
02089  0B3C  8D 26 D0              STA SPMC1
02090  0B3F             
02091  0B3F  60                    RTS
02092  0B40             
02093  0B40             SETUPCUSTOMCHARACTERS 
02094  0B40             
02095  0B40             
02096  0B40  AD 18 D0              LDA VMCSB
02097  0B43  29 F0                 AND #%11110000
02098  0B45  09 0C                 ORA #12
02099  0B47  8D 18 D0              STA VMCSB
02100  0B4A             
02101  0B4A             
02102  0B4A  60                    RTS
02103  0B4B             
02104  0B4B             SCNLEVELONE 
02105  0B4B  93 05 11              TEXT "{WHITE}{DOWN*8}GG{DOWN}BC{DOWN}D{DOWN}H{DOWN}{LEFT}J{DOWN}H{DOWN}{LEFT}J{DOWN}{LEFT}I{DOWN}{LEFT}K{DOWN}{LEFT*2}E{DOWN}{LEFT*3}@A{DOWN}{LEFT*3}E{DOWN}{LEFT*2}E{DOWN}{LEFT}D{DOWN}D{DOWN}D{DOWN}DLLLK{UP}{LEFT}I"
02106  0B8F  91 9D 4A              TEXT "FT}J{UP}{LEFT}H{UP}{LEFT}E{UP}E{UP}@A{UP}E{UP}K{UP}{LEFT}I{UP}K{UP}{LEFT}I{UP}LLLK{UP}{LEFT}I{UP}{LEFT}D{UP}{LEFT*2}D{UP}{LEFT}@A{UP}E{UP}K{UP}{LEFT}I{UP}F{DOWN}DGG{DOWN}H{DOWN}{LEFT}J{DOWN}H{DOWN}{LEFT}J"
02107  0BD3  11 9D 49              TEXT "{DOWN}{LEFT}I{DOWN}{LEFT}K{DOWN}{LEFT}H{DOWN}{LEFT}J{DOWN}H{DOWN}{LEFT}J{DOWN}{LEFT}E{DOWN}{LEFT*2}E{DOWN}{LEFT}H{DOWN}{LEFT}J{DOWN}D{DOWN}BCLLLLEBC{DOWN}BC{DOWN}D"
02108  0C02  00                    BYTE 0
02109  0C03             
02110  0C03             SETUPLEVELONESCENE 
02111  0C03             
02112  0C03             
02113  0C03                        
02114  0C03  A0 00                 LDY #0
02115  0C05             
02116  0C05             @GETNEXTCHARACTER 
02117  0C05  B9 4B 0B              LDA SCNLEVELONE,Y
02118  0C08  F0 09                 BEQ @END
02119  0C0A  20 D2 FF              JSR KRLJMP_CHROUT$
02120  0C0D  C8                    INY
02121  0C0E  F0 03                 BEQ @END
02122  0C10  4C 05 0C              JMP @GETNEXTCHARACTER
02123  0C13             
02124  0C13             @END
02125  0C13  60                    RTS
02126  0C14                        
02127  0C14                        ;80 VV = 0 : G = 3/112 : T = 3/112 : HV = 0 : HI = 1/28
02128  0C14             SETUPGAMEVARIABLES 
02129  0C14  A9 00                 LDA #0
02130  0C16  8D 31 08              STA VERTICALVELOCITY
02131  0C19  8D 37 08              STA HORIZONTALVELOCITY
02132  0C1C  8D 33 08              STA GRAVITY
02133  0C1F  8D 35 08              STA THRUST
02134  0C22  8D 39 08              STA HORIZONTALINERTIA
02135  0C25             
02136  0C25  A9 02                 LDA #2
02137  0C27  8D 32 08              STA GRAVITYFRAC
02138  0C2A  A9 04                 LDA #4
02139  0C2C  8D 34 08              STA THRUSTFRAC
02140  0C2F  A9 02                 LDA #2
02141  0C31  8D 38 08              STA HORIZONTALINERTIAFRAC
02142  0C34             
02143  0C34  60                    RTS
02144  0C35             
02145  0C35             READINPUTANDUPDATEVARIABLES 
02146  0C35  20 FE 08              JSR LIBINPUTUPDATE
02147  0C38             
02148  0C38             
02149  0C38             
02150  0C38  AD FA 08              LDA GAMEPORTTHISFRAME
02151  0C3B  29 04                 AND #GAMEPORTLEFTMASK
02152  0C3D  D0 18                 BNE @TESTRIGHT
02153  0C3F             
02154  0C3F                        ;130 IF A = 10 THEN HV = HV + HI : TS = 185 :REM A
02155  0C3F             
02156  0C3F             
02157  0C3F             
02158  0C3F  18                    CLC
02159  0C40  AD 36 08              LDA HORIZONTALVELOCITYFRAC
02160  0C43  6D 38 08              ADC HORIZONTALINERTIAFRAC
02161  0C46  8D 36 08              STA HORIZONTALVELOCITYFRAC
02162  0C49  AD 37 08              LDA HORIZONTALVELOCITYFRAC+1
02163  0C4C  6D 39 08              ADC HORIZONTALINERTIAFRAC+1
02164  0C4F  8D 37 08              STA HORIZONTALVELOCITYFRAC+1
02165  0C52             
02166  0C52             
02167  0C52             
02168  0C52  A2 04                 LDX #SPTHRUSTLEFT
02169  0C54  8E 2E 08              STX MANUOVERFRAMENO
02170  0C57             
02171  0C57             @TESTRIGHT 
02172  0C57             
02173  0C57             
02174  0C57  AD FA 08              LDA GAMEPORTTHISFRAME
02175  0C5A  29 08                 AND #GAMEPORTRIGHTMASK
02176  0C5C  D0 18                 BNE @TESTFIRE
02177  0C5E             
02178  0C5E                        ;120 IF A = 18 THEN HV = HV - HI : TS = 184 : REM D
02179  0C5E             
02180  0C5E             
02181  0C5E  38                    SEC
02182  0C5F  AD 36 08              LDA HORIZONTALVELOCITYFRAC
02183  0C62  ED 38 08              SBC HORIZONTALINERTIAFRAC
02184  0C65  8D 36 08              STA HORIZONTALVELOCITYFRAC
02185  0C68  AD 37 08              LDA HORIZONTALVELOCITYFRAC+1
02186  0C6B  ED 39 08              SBC HORIZONTALINERTIAFRAC+1
02187  0C6E  8D 37 08              STA HORIZONTALVELOCITYFRAC+1
02188  0C71             
02189  0C71             
02190  0C71             
02191  0C71  A2 03                 LDX #SPTHRUSTRIGHT
02192  0C73  8E 2E 08              STX MANUOVERFRAMENO
02193  0C76             
02194  0C76             @TESTFIRE
02195  0C76             
02196  0C76             
02197  0C76  AD FA 08              LDA GAMEPORTTHISFRAME
02198  0C79  29 10                 AND #GAMEPORTFIREMASK
02199  0C7B  D0 1B                 BNE @NOINPUT
02200  0C7D             
02201  0C7D                        ;110 IF A = 22 THEN VV = VV - T : TS=183 :
02202  0C7D             @FIREDETECTED 
02203  0C7D             
02204  0C7D             
02205  0C7D  38                    SEC
02206  0C7E  AD 30 08              LDA VERTICALVELOCITYFRAC
02207  0C81  ED 34 08              SBC THRUSTFRAC
02208  0C84  8D 30 08              STA VERTICALVELOCITYFRAC
02209  0C87  AD 31 08              LDA VERTICALVELOCITYFRAC+1
02210  0C8A  ED 35 08              SBC THRUSTFRAC+1
02211  0C8D  8D 31 08              STA VERTICALVELOCITYFRAC+1
02212  0C90             
02213  0C90             
02214  0C90             
02215  0C90  A2 02                 LDX #SPTHRUSTDOWN
02216  0C92  8E 2B 08              STX THRUSTFRAMENO
02217  0C95  4C BC 0C              JMP @GRAVITYBYPASS
02218  0C98             
02219  0C98             @NOINPUT
02220  0C98             
02221  0C98             
02222  0C98  AD FA 08              LDA GAMEPORTTHISFRAME
02223  0C9B  29 1F                 AND #GAMEPORTNOINPUTMASK
02224  0C9D  C9 1F                 CMP #GAMEPORTNOINPUTMASK
02225  0C9F  D0 08                 BNE @INPUTPROCESSED
02226  0CA1  A2 05                 LDX #SPNOTHRUST
02227  0CA3  8E 2B 08              STX THRUSTFRAMENO
02228  0CA6  8E 2E 08              STX MANUOVERFRAMENO
02229  0CA9             
02230  0CA9                        ;200 VV = VV + G : IF VV > 2 THEN VV = 2
02231  0CA9             @INPUTPROCESSED 
02232  0CA9             
02233  0CA9             
02234  0CA9             
02235  0CA9  18                    CLC
02236  0CAA  AD 30 08              LDA VERTICALVELOCITYFRAC
02237  0CAD  6D 32 08              ADC GRAVITYFRAC
02238  0CB0  8D 30 08              STA VERTICALVELOCITYFRAC
02239  0CB3  AD 31 08              LDA VERTICALVELOCITYFRAC+1
02240  0CB6  6D 33 08              ADC GRAVITYFRAC+1
02241  0CB9  8D 31 08              STA VERTICALVELOCITYFRAC+1
02242  0CBC             
02243  0CBC             
02244  0CBC             
02245  0CBC             
02246  0CBC             @GRAVITYBYPASS 
02247  0CBC  AD 31 08              LDA VERTICALVELOCITY
02248  0CBF  C9 02                 CMP #2
02249  0CC1  D0 0A                 BNE @INPUTFINISH
02250  0CC3             
02251  0CC3  A9 01                 LDA #1
02252  0CC5  8D 31 08              STA VERTICALVELOCITY
02253  0CC8  A9 00                 LDA #0
02254  0CCA  8D 30 08              STA VERTICALVELOCITYFRAC
02255  0CCD             
02256  0CCD             @INPUTFINISH 
02257  0CCD  60                    RTS
02258  0CCE             
02259  0CCE             UPDATESPRITEPOSITION 
02260  0CCE                        ; 210 Y = (Y+VV) : X = (X+HV)
02261  0CCE             
02262  0CCE             
02263  0CCE             
02264  0CCE  18                    CLC
02265  0CCF  AD 26 08              LDA LUNALANDERYFRAC
02266  0CD2  6D 30 08              ADC VERTICALVELOCITYFRAC
02267  0CD5  8D 26 08              STA LUNALANDERYFRAC
02268  0CD8  AD 27 08              LDA LUNALANDERYFRAC+1
02269  0CDB  6D 31 08              ADC VERTICALVELOCITYFRAC+1
02270  0CDE  8D 27 08              STA LUNALANDERYFRAC+1
02271  0CE1             
02272  0CE1             
02273  0CE1             
02274  0CE1                        ;LIBMATH_ADD8BIT_AAA LUNALANDERY, VERTICALVELOCITY, LUNALANDERY
02275  0CE1             
02276  0CE1             
02277  0CE1             
02278  0CE1  18                    CLC
02279  0CE2  AD 23 08              LDA LUNALANDERXFRAC
02280  0CE5  6D 36 08              ADC HORIZONTALVELOCITYFRAC
02281  0CE8  8D 23 08              STA LUNALANDERXFRAC
02282  0CEB  AD 24 08              LDA LUNALANDERXFRAC+1
02283  0CEE  6D 37 08              ADC HORIZONTALVELOCITYFRAC+1
02284  0CF1  8D 24 08              STA LUNALANDERXFRAC+1
02285  0CF4             
02286  0CF4             
02287  0CF4             
02288  0CF4             
02289  0CF4                        ;215 POKE 2041,TS : POKE 53250, XL : POKE 53251, Y
02290  0CF4                        ;216 POKE 53249, Y : POKE 53248,XL : POKE 53264, XH : REM CC=CC+1
02291  0CF4             
02292  0CF4             
02293  0CF4  AC 2A 08              LDY THRUSTSPNO
02294  0CF7                        
02295  0CF7  18                    CLC
02296  0CF8  AD 2B 08              LDA THRUSTFRAMENO
02297  0CFB  69 AA                 ADC #SPRITERAM
02298  0CFD                        
02299  0CFD  99 F8 07              STA SPRITE0,Y
02300  0D00             
02301  0D00             
02302  0D00             
02303  0D00  AC 2D 08              LDY MANUOVERSPNO
02304  0D03                        
02305  0D03  18                    CLC
02306  0D04  AD 2E 08              LDA MANUOVERFRAMENO
02307  0D07  69 AA                 ADC #SPRITERAM
02308  0D09                        
02309  0D09  99 F8 07              STA SPRITE0,Y
02310  0D0C             
02311  0D0C             
02312  0D0C             
02313  0D0C             
02314  0D0C             
02315  0D0C  AD 28 08              LDA LUNALANDERSPNO
02316  0D0F  0A                    ASL
02317  0D10  A8                    TAY
02318  0D11             
02319  0D11  AD 24 08              LDA LUNALANDERXLO
02320  0D14  99 00 D0              STA SP0X,Y
02321  0D17  AD 27 08              LDA LUNALANDERY
02322  0D1A  99 01 D0              STA SP0Y,Y
02323  0D1D                        
02324  0D1D  AC 28 08              LDY LUNALANDERSPNO
02325  0D20  B9 7F 08              LDA SPRITENUMBERMASK,Y
02326  0D23                        
02327  0D23  49 FF                 EOR #$FF
02328  0D25  2D 10 D0              AND MSIGX
02329  0D28  8D 10 D0              STA MSIGX
02330  0D2B             
02331  0D2B  AC 25 08              LDY LUNALANDERXHI
02332  0D2E  F0 0C                 BEQ @END
02333  0D30  AC 28 08              LDY LUNALANDERSPNO
02334  0D33  B9 7F 08              LDA SPRITENUMBERMASK,Y
02335  0D36                        
02336  0D36  0D 10 D0              ORA MSIGX
02337  0D39  8D 10 D0              STA MSIGX
02338  0D3C             @END
02339  0D3C             
02340  0D3C             
02341  0D3C             
02342  0D3C             
02343  0D3C             
02344  0D3C             
02345  0D3C  AD 2A 08              LDA THRUSTSPNO
02346  0D3F  0A                    ASL
02347  0D40  A8                    TAY
02348  0D41             
02349  0D41  AD 24 08              LDA LUNALANDERXLO
02350  0D44  99 00 D0              STA SP0X,Y
02351  0D47  AD 27 08              LDA LUNALANDERY
02352  0D4A  99 01 D0              STA SP0Y,Y
02353  0D4D                        
02354  0D4D  AC 2A 08              LDY THRUSTSPNO
02355  0D50  B9 7F 08              LDA SPRITENUMBERMASK,Y
02356  0D53                        
02357  0D53  49 FF                 EOR #$FF
02358  0D55  2D 10 D0              AND MSIGX
02359  0D58  8D 10 D0              STA MSIGX
02360  0D5B             
02361  0D5B  AC 25 08              LDY LUNALANDERXHI
02362  0D5E  F0 0C                 BEQ @END
02363  0D60  AC 2A 08              LDY THRUSTSPNO
02364  0D63  B9 7F 08              LDA SPRITENUMBERMASK,Y
02365  0D66                        
02366  0D66  0D 10 D0              ORA MSIGX
02367  0D69  8D 10 D0              STA MSIGX
02368  0D6C             @END
02369  0D6C             
02370  0D6C             
02371  0D6C             
02372  0D6C             
02373  0D6C             
02374  0D6C             
02375  0D6C  AD 2D 08              LDA MANUOVERSPNO
02376  0D6F  0A                    ASL
02377  0D70  A8                    TAY
02378  0D71             
02379  0D71  AD 24 08              LDA LUNALANDERXLO
02380  0D74  99 00 D0              STA SP0X,Y
02381  0D77  AD 27 08              LDA LUNALANDERY
02382  0D7A  99 01 D0              STA SP0Y,Y
02383  0D7D                        
02384  0D7D  AC 2D 08              LDY MANUOVERSPNO
02385  0D80  B9 7F 08              LDA SPRITENUMBERMASK,Y
02386  0D83                        
02387  0D83  49 FF                 EOR #$FF
02388  0D85  2D 10 D0              AND MSIGX
02389  0D88  8D 10 D0              STA MSIGX
02390  0D8B             
02391  0D8B  AC 25 08              LDY LUNALANDERXHI
02392  0D8E  F0 0C                 BEQ @END
02393  0D90  AC 2D 08              LDY MANUOVERSPNO
02394  0D93  B9 7F 08              LDA SPRITENUMBERMASK,Y
02395  0D96                        
02396  0D96  0D 10 D0              ORA MSIGX
02397  0D99  8D 10 D0              STA MSIGX
02398  0D9C             @END
02399  0D9C             
02400  0D9C             
02401  0D9C             
02402  0D9C             
02403  0D9C  60                    RTS
02404  0D9D             
02405  0D9D             

******* 88 Label(s) *******
~~~disable{00001} = $08E8 
~~~disable{00009} = $0A4C 
~~~disable{00010} = $0A67 
~~~disable{00011} = $0A82 
~~~done{00001} = $08F0 
~~~done{00009} = $0A54 
~~~done{00010} = $0A6F 
~~~done{00011} = $0A8A 
~~~enable{00001} = $08DF 
~~~enable{00009} = $0A43 
~~~enable{00010} = $0A5E 
~~~enable{00011} = $0A79 
~~~end{00012} = $0ABA 
~~~end{00013} = $0AEA 
~~~end{00014} = $0B1A 
~~~end{00020} = $0C13 
~~~end{00033} = $0D3C 
~~~end{00034} = $0D6C 
~~~end{00035} = $0D9C 
~~~getnextcharacter{00020} = $0C05 
~~~loop{00005} = $09C9 
ColorRAMRowStartHigh = $0964 
ColorRAMRowStartLow = $094B 
fireBlip = $08FD 
fireDelay = $08FC 
FrameSkipRate = $083B 
GameLoop = $09C9 
GameLooper = $09E0 
GameLoopFrameTracker = $083A 
gameportDiff = $08FB 
gameportLastFrame = $08F9 
gameportThisFrame = $08FA 
GameStart = $09BD 
Gravity = $0833 
GravityFrac = $0832 
HorizontalInertia = $0839 
HorizontalInertiaFrac = $0838 
HorizontalVelocity = $0837 
HorizontalVelocityFrac = $0836 
libInputUpdate = $08FE 
libScreen_PixelToChar = $097F 
libSpritesUpdate = $0887 
lIUDelayZero = $0912 
lSoUActive = $0891 
lSoUDestroy = $08D0 
lSoUFinished = $08F8 
lSoULoop = $0889 
lSoUSkip = $08F0 
LunaLanderColour = $0829 
LunaLanderSpNo = $0828 
LunaLanderXFrac = $0823 
LunaLanderXHi = $0825 
LunaLanderXLo = $0824 
LunaLanderY = $0827 
LunaLanderYFrac = $0826 
ManuoverColour = $082F 
ManuoverFrameNo = $082E 
ManuoverSpNo = $082D 
ReadInputAndUpdateVariables = $0C35 
ScnLevelOne = $0B4B 
screenColumn = $097D 
ScreenRAMRowStartHigh = $0932 
ScreenRAMRowStartLow = $0919 
screenScrollXValue = $097E 
SetUpCustomCharacters = $0B40 
SetUpGameVariables = $0C14 
SetUpLevelOneScene = $0C03 
SetUpLunarSprite = $09F5 
spriteAnimsActive = $083C 
spriteAnimsCurrent = $087C 
spriteAnimsDelay = $086C 
spriteAnimsEndFrame = $0854 
spriteAnimsEndFrameCurrent = $087E 
spriteAnimsFrame = $084C 
spriteAnimsFrameCurrent = $087D 
spriteAnimsLoop = $0874 
spriteAnimsSpeed = $0864 
spriteAnimsStartFrame = $0844 
spriteAnimsStopFrame = $085C 
spriteNumberMask = $087F 
Thrust = $0835 
ThrustColour = $082C 
ThrustFrac = $0834 
ThrustFrameNo = $082B 
ThrustSpNo = $082A 
UpdateSpritePosition = $0CCE 
VerticalVelocity = $0831 
VerticalVelocityFrac = $0830 

******* 32 Unused label(s) *******
@FireDetected
@GravityByPass
@InputFinish
@InputProcessed
@NoInput
@nothigh
@TestFire
@TestRight
~~~disable{00001}
~~~disable{00009}
~~~disable{00010}
~~~disable{00011}
~~~done{00001}
~~~done{00009}
~~~done{00010}
~~~done{00011}
~~~enable{00001}
~~~enable{00009}
~~~enable{00010}
~~~enable{00011}
~~~end{00012}
~~~end{00013}
~~~end{00014}
~~~end{00020}
~~~end{00033}
~~~end{00034}
~~~end{00035}
~~~getnextcharacter{00020}
~~~loop{00005}
ColorRAMRowStartHigh
ColorRAMRowStartLow
fireBlip
GameStart
libScreen_PixelToChar
libSpritesUpdate
screenColumn
ScreenRAMRowStartHigh
ScreenRAMRowStartLow
screenScrollXValue
spriteAnimsStopFrame

******* 134 Variable(s) *******
ATDCY1  = $D405
ATDCY2  = $D40C
ATDCY3  = $D413
BGCOL0  = $D021
BGCOL1  = $D022
BGCOL2  = $D023
BGCOL3  = $D024
Black  = $0000
Blue  = $0006
Brown  = $0009
CIAPRA  = $DC00
CIAPRB  = $DC01
COLORRAM  = $D800
Cyan  = $0003
DarkGray  = $000B
EXTCOL  = $D020
False  = $0000
FireDelayMax  = $001E
FREHI1  = $D401
FREHI2  = $D408
FREHI3  = $D40F
FRELO1  = $D400
FRELO2  = $D407
FRELO3  = $D40E
GameportDownMask  = $0002
GameportFireMask  = $0010
GameportLeftMask  = $0004
GameportNoInputMask  = $001F
GameportRightMask  = $0008
GameportUpMask  = $0001
Green  = $0005
JoystickRegister  = $DC00
krljmp_ACPTR$  = $FFA5
krljmp_BASE$  = $FFF3
krljmp_CHKIN$  = $FFC6
krljmp_CHKOUT$  = $FFC9
krljmp_CHRIN$  = $FFCF
krljmp_CHROUT$  = $FFD2
krljmp_CIOUT$  = $FFA8
krljmp_CLALL$  = $FFE7
krljmp_CLOSE$  = $FFC3
krljmp_CLRCHN$  = $FFCC
krljmp_GETIN$  = $FFE4
krljmp_IOINIT$  = $FF84
krljmp_LISTEN$  = $FFB1
krljmp_LOAD$  = $FFD5
krljmp_MEMBOT$  = $FF9C
krljmp_MEMTOP$  = $FF99
krljmp_OPEN$  = $FFC0
krljmp_PCINT$  = $FF81
krljmp_PLOT$  = $FFF0
krljmp_RAMTAS$  = $FF87
krljmp_RDTIM$  = $FFDE
krljmp_READST$  = $FFB7
krljmp_RESTOR$  = $FF8A
krljmp_SAVE$  = $FFD8
krljmp_SCNKEY$  = $FF9F
krljmp_SCREEN$  = $FFED
krljmp_SECOND$  = $FF93
krljmp_SETLFS$  = $FFBA
krljmp_SETMSG$  = $FF90
krljmp_SETNAM$  = $FFBD
krljmp_SETTIM$  = $FFDB
krljmp_SETTMO$  = $FFA2
krljmp_STOP$  = $FFE1
krljmp_TALK$  = $FFB4
krljmp_TKSA$  = $FF96
krljmp_UDTIM$  = $FFEA
krljmp_UNLSN$  = $FFAE
krljmp_UNTALK$  = $FFAB
krljmp_VECTOR$  = $FF8D
LightBlue  = $000E
LightGray  = $000F
LightGreen  = $000D
LightRed  = $000A
MediumGray  = $000C
MSIGX  = $D010
Orange  = $0008
Purple  = $0004
PWHI1  = $D403
PWHI2  = $D40A
PWHI3  = $D411
PWLO1  = $D402
PWLO2  = $D409
PWLO3  = $D410
RASTER  = $D012
Red  = $0002
SCREENRAM  = $0400
SCROLX  = $D016
SIGVOL  = $D418
SP0COL  = $D027
SP0X  = $D000
SP0Y  = $D001
SpaceCharacter  = $0020
SPBGPR  = $D01B
SPENA  = $D015
spLunaLander  = $0000
SPMC  = $D01C
SPMC0  = $D025
SPMC1  = $D026
spNoThrust  = $0005
SPRITE0  = $07F8
SpriteAnimsMax  = $0008
SPRITERAM  = $00AA
SPSPCL  = $D01E
spThrustDown  = $0002
spThrustLeft  = $0004
spThrustRight  = $0003
SUREL1  = $D406
SUREL2  = $D40D
SUREL3  = $D414
tgt_c64  = $0001
True  = $0001
VCREG1  = $D404
VCREG2  = $D40B
VCREG3  = $D412
VICIRQ  = $D019
VMCSB  = $D018
White  = $0001
Yellow  = $0007
ZeroPageHigh  = $00FC
ZeroPageHigh2  = $00FE
ZeroPageLow  = $00FB
ZeroPageLow2  = $00FD
ZeroPageParam1  = $0073
ZeroPageParam2  = $0074
ZeroPageParam3  = $0075
ZeroPageParam4  = $0076
ZeroPageParam5  = $0077
ZeroPageParam6  = $0078
ZeroPageParam7  = $0079
ZeroPageParam8  = $007A
ZeroPageParam9  = $007B
ZeroPageTemp  = $0002
******* 98 Unused variables(s) *******
ATDCY1
ATDCY2
ATDCY3
BGCOL0
BGCOL1
BGCOL2
BGCOL3
Black
Blue
Brown
CIAPRA
CIAPRB
COLORRAM
Cyan
DarkGray
FireDelayMax
FREHI1
FREHI2
FREHI3
FRELO1
FRELO2
FRELO3
GameportDownMask
GameportUpMask
Green
krljmp_ACPTR$
krljmp_BASE$
krljmp_CHKIN$
krljmp_CHKOUT$
krljmp_CHRIN$
krljmp_CHROUT$
krljmp_CIOUT$
krljmp_CLALL$
krljmp_CLOSE$
krljmp_CLRCHN$
krljmp_GETIN$
krljmp_IOINIT$
krljmp_LISTEN$
krljmp_LOAD$
krljmp_MEMBOT$
krljmp_MEMTOP$
krljmp_OPEN$
krljmp_PCINT$
krljmp_PLOT$
krljmp_RAMTAS$
krljmp_RDTIM$
krljmp_READST$
krljmp_RESTOR$
krljmp_SAVE$
krljmp_SCNKEY$
krljmp_SCREEN$
krljmp_SECOND$
krljmp_SETLFS$
krljmp_SETMSG$
krljmp_SETNAM$
krljmp_SETTIM$
krljmp_SETTMO$
krljmp_STOP$
krljmp_TALK$
krljmp_TKSA$
krljmp_UDTIM$
krljmp_UNLSN$
krljmp_UNTALK$
krljmp_VECTOR$
LightBlue
LightGreen
LightRed
MediumGray
MSIGX
Orange
Purple
PWHI1
PWHI2
PWHI3
PWLO1
PWLO2
PWLO3
RASTER
SCREENRAM
SCROLX
SIGVOL
SP0COL
SP0X
SP0Y
SpaceCharacter
SPBGPR
SPENA
SPMC
SPMC0
SPMC1
SPRITE0
SPRITERAM
SPSPCL
SUREL1
SUREL2
SUREL3
tgt_c64
VCREG1
VCREG2
VCREG3
VMCSB
White
ZeroPageHigh
ZeroPageHigh2
ZeroPageLow
ZeroPageLow2

